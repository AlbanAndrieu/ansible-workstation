#!/bin/bash
#
# Commands dependencies
# =====================
#
DIRENV_CMD_DEPENDENCIES="unzip tar mkdir curl chmod rm git make"
for mandatory_cmd in ${DIRENV_CMD_DEPENDENCIES}; do
	if [ -z "$(which "${mandatory_cmd}")" ]; then
		echo "===> Mandatory command not found: ${mandatory_cmd}"
		exit 1
	fi
done

#
# Direnv configuration
# =====================
#

export DIRENV_TMP_DIR="${PWD}/.direnv"
export DIRENV_BIN_DIR="${DIRENV_TMP_DIR}/bin"
if [ ! -e "${DIRENV_BIN_DIR}" ]; then
	mkdir -p "${DIRENV_BIN_DIR}"
fi
export PATH="${DIRENV_BIN_DIR}:${PATH}"

DIRENV_PYTHON_LIBS_DIR_RELATIVE="$(find "${DIRENV_TMP_DIR}" -type d -name site-packages)"
# python package are in venv
if [ ! -e "${DIRENV_PYTHON_LIBS_DIR_RELATIVE}" ]; then
	DIRENV_PYTHON_LIBS_DIR_RELATIVE="$(find "${VENV_TMP_DIR}" -type d -name site-packages)"
fi
# shellcheck disable=SC2155
export DIRENV_PYTHON_LIBS_DIR="$(realpath "${DIRENV_PYTHON_LIBS_DIR_RELATIVE}")"

if type lsb_release >/dev/null 2>&1; then
	# linuxbase.org
	OS=$(lsb_release -si)
	VER=$(lsb_release -sr)
fi

if [ "${OS}" == "Ubuntu" ]; then
	#
	# Buildah configuration
	# =====================
	#

	if command -v buildah >/dev/null 2>&1; then
		echo buildah is installed
	else
		#
		# Install buildah
		# ==========================
		#
		sudo apt update
		sudo apt install -y software-properties-common
		sudo add-apt-repository -y ppa:projectatomic/ppa
		sudo apt install buildah
	fi

	if command -v podman >/dev/null 2>&1; then
		echo podman is installed
	else
		#
		# Install podman
		# ==========================
		#
		sudo apt update
		sudo apt install podman
	fi
fi

#
# Other configuration
# =====================
#

#sudo apt install openjdk-17-dbg
#sudo update-java-alternatives -s java-1.17.0-openjdk-amd64

#
# Node configuration
# =====================
#

# export NODE_VERSIONS=${NODE_VERSIONS:-"lts/iron"}
export NODE_VERSIONS=${NODE_VERSIONS:-"v20.18.3"}

if [ -f ".nvmrc" ]; then
	#
	# Nvm installation
	# ==========================
	#
	# curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
	NVM_VERSION=${NVM_VERSION:-"v0.39.7"}
	NVM_PKG_URL="https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERSION}/install.sh"
	if [ ! -e "${HOME}/.nvm/nvm.sh" ]; then
		echo "===> Getting nvm:${NVM_VERSION} (can take a while to execute)"
		curl -s -L "${NVM_PKG_URL}" | bash
		echo "nvm install ${NODE_VERSIONS}"
		nvm install "${NODE_VERSIONS}" || true
	fi

	# shellcheck disable=SC1091
	source "${HOME}/.nvm/nvm.sh"
	# nvm use ${NODE_VERSIONS}
fi

# layout_node

# Or a specific version
#use node "${NODE_VERSIONS}"
#use_nvm "${NODE_VERSIONS}"

#export PATH="./node_modules/.bin:${PATH}"

#
# Python configuration
# =====================
#

export PYTHON_VERSION=${PYTHON_VERSION:-"3.12.10"}

#
# Python pyenv installation
# ==========================
#
PYENV_PKG_URL="https://pyenv.run"
if [ ! -e "${HOME}/.pyenv/bin/pyenv" ]; then
	echo "===> Getting pyenv (can take a while to execute)"
	curl -s -L "${PYENV_PKG_URL}" | bash
	echo "===> Run : pyenv init"
	echo "===> Run : pyenv local ${PYTHON_VERSION}"
fi

export VENV_TMP_DIR="${PWD}/.venv"
export VENV_BIN_DIR="${VENV_TMP_DIR}/bin"

# check if python version is set in current dir
# .python-version will be created by : pyenv local ${PYTHON_VERSION}
if [ -f ".python-version" ]; then
	if [ ! -d "${VENV_TMP_DIR}" ]; then
		echo "Installing virtualenv for $(cat .python-version)"
		# if we didn't install `py2venv` for python 2.x, we would need to use
		# `virtualenv`, which you would have to install separately.
		python -m venv "${VENV_TMP_DIR}"
	fi
	echo "Activating $(cat .python-version) virtualenv"
	# shellcheck disable=SC1091
	source "${VENV_BIN_DIR}/activate"
	# announce python version and show the path of the current python in ${PATH}
	echo "Virtualenv has been activated for $(cat .python-version)"
	# echo "$(which python)"
fi

if command -v pyenv >/dev/null 2>&1; then
	# layout pyenv "${PYTHON_VERSION}"
	layout pyenv
elif command -v conda >/dev/null 2>&1; then
	layout_anaconda
	echo "pip3 install chardet"
	echo "conda create -n textgen python=${PYTHON_VERSION}"
	conda activate textgen
else
	layout_python3
fi

if command -v pyenv >/dev/null 2>&1; then
	#
	# Python pip requirements
	# ==========================
	#
	for VERSION in $(pyenv versions --bare | grep -E '^2.'); do
		pyenv shell "${VERSION}" 2>/dev/null
		pip install py2venv
	done

	#
	# Python pip upgrade
	# ==========================
	#
	# curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
	for VERSION in $(pyenv versions --bare); do
		pyenv shell "${VERSION}" 2>/dev/null
		pip install --upgrade pip # 25.2
	done
fi

# if pyenv and venv
if [ -f ".python-version" ]; then
	#
	# Python pipenv installation
	# ==========================
	#
	# python -m pip install pipenv==2023.12.0
	PIPENV_VERSION=${PIPENV_VERSION:-"2023.12.0"}
	if [ ! -e "${VENV_BIN_DIR}/pipenv" ]; then
		echo "===> Getting pipenv:${PIPENV_VERSION} (can take a while to execute)"
		python -m pip install pipenv=="${PIPENV_VERSION}"
	fi

	#
	# Python 3 requirements
	# ==========================
	#
	# python -m pip install -r ansible/requirements.txt -r requirements.txt
	python -m pipenv install --dev --site-packages --ignore-pipfile 2>/dev/null
	echo python -m pipenv install --dev --site-packages --verbose >pipenv.log 2>&1

	#
	# Below install what you do not have already in Pipfile.lock or requirements.txt
	# ==========================

	#
	# Python pre-commit installation
	# ==========================
	#
	# python -m pip install pre-commit==4.2.0
	PRECOMMIT_VERSION=${PRECOMMIT_VERSION:-"4.2.0"}
	if [ ! -e "${VENV_BIN_DIR}/pre-commit" ]; then
		echo "===> Getting pre-commit:${PRECOMMIT_VERSION} (can take a while to execute)"
		python -m pip install pre-commit=="${PRECOMMIT_VERSION}" # nosemgrep
	fi

	pre-commit install 2>/dev/null || true

	#
	# Ansible CLI installation
	# ==========================
	#
	# python -m pip install --user https://github.com/ansible/ansible/archive/stable-2.17.tar.gz
	# ANSIBLE_VERSION=${ANSIBLE_VERSION:-"2.17"}
	# ANSIBLE_PKG_URL="https://github.com/ansible/ansible/archive/stable-${ANSIBLE_VERSION}.tar.gz"
	# if [ ! -e "${VENV_BIN_DIR}/ansible" ]; then
	#   echo "===> Getting ansible:${ANSIBLE_VERSION} (can take a while to execute)"
	#   python -m pip install "${ANSIBLE_PKG_URL}"
	# fi

	#
	# Ansible configuration
	# =====================
	#
	#export ANSIBLE_LIBRARY="${PWD}/plugins/modules:${ANSIBLE_LIBRARY}"
	##export ANSIBLE_SSH_ARGS="-F ${PWD}/ssh.cfg"
	##export ANSIBLE_INVENTORY="hosts"
	#export ANSIBLE_COLLECTIONS_PATHS="${DIRENV_TMP_DIR}"

fi

#
# Levant CLI installation
# ==========================
#
# curl -L https://github.com/hashicorp/levant/releases/download/0.2.9/linux-amd64-levant -o levant
LEVANT_VERSION=${LEVANT_VERSION:-"0.2.9"}
LEVANT_ARCH="linux-amd64"
LEVANT_PKG_NAME="${LEVANT_ARCH}-levant"
LEVANT_PKG_URL="https://github.com/hashicorp/levant/releases/download/${LEVANT_VERSION}/${LEVANT_PKG_NAME}"
LEVANT_PKG_PATH="${DIRENV_TMP_DIR}/levant"
if [ ! -e "${DIRENV_BIN_DIR}/levant" ]; then
	echo "===> Getting levant:${LEVANT_VERSION}:${LEVANT_ARCH} (can take a while to execute)"
	curl -s -L "${LEVANT_PKG_URL}" -o "${LEVANT_PKG_PATH}"
	mv "${LEVANT_PKG_PATH}" "${DIRENV_BIN_DIR}"
	chmod 700 "${DIRENV_BIN_DIR}/levant"
	rm -f "${LEVANT_PKG_PATH}"
fi

#
# GO installation
# ==========================
#
# curl -O https://storage.googleapis.com/golang/go1.22.4.linux-amd64.tar.gz
GO_VERSION="1.22.4"
GO_ARCH="linux-amd64"
GO_PKG_NAME="go${GO_VERSION}.${GO_ARCH}.tar.gz"
GO_PKG_PATH="${DIRENV_TMP_DIR}/${GO_PKG_NAME}"
GO_PKG_URL="https://storage.googleapis.com/golang/${GO_PKG_NAME}"
if [ ! -e "${DIRENV_BIN_DIR}/go/bin/go" ]; then
	echo "===> Getting go:${GO_VERSION} (can take a while to execute)"
	curl -s -L "${GO_PKG_URL}" -o "${GO_PKG_PATH}"
	tar -xf "${GO_PKG_PATH}" -C "${DIRENV_BIN_DIR}"
	rm -f "${GO_PKG_PATH}"
fi

PATH_add "${DIRENV_BIN_DIR}/go/bin/"
# export GOROOT="$(go${GO_VERSION} env GOROOT)"
export GOROOT="$(go env GOROOT)"
# PATH_add "$(go${GO_VERSION} env GOROOT)/bin"

#
# GO sec installation
# ==========================
#
# curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.11.0
GO_SEC_VERSION="2.11.0"
GO_SEC_PKG_URL="https://raw.githubusercontent.com/securego/gosec/master/install.sh"
if [ ! -e "${HOME}/go/bin/gosec" ]; then
	echo "===> Getting go sec:${GO_SEC_VERSION} (can take a while to execute)"
	curl -sfL "${GO_SEC_PKG_URL}" | sh -s -- -b "$(go env GOPATH)/bin" "v${GO_SEC_VERSION}"
fi

layout go

#
# Environment configuration
# =========================
#
#

DOTENV_ADDONS=".env .env.secrets"
# shellcheck disable=SC2155
for addon in ${DOTENV_ADDONS}; do
	if [ -e "${PWD}/${addon}" ]; then
		dotenv "${PWD}/${addon}"
	fi
done

ENV_ADDONS=".env.local"
for addon in ${ENV_ADDONS}; do
	if [ -e "${PWD}/${addon}" ]; then
		# shellcheck disable=SC1090
		source "${PWD}/${addon}"
	fi
done

# envsubst < etc/config > .dvc/config
# envsubst < etc/pip.conf > pip.conf

# echo "dvc pull"

# See https://github.com/direnv/direnv/wiki/PS1
unset PS1
