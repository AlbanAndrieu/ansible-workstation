#
# Commands dependencies
# =====================
#
DIRENV_CMD_DEPENDENCIES="unzip tar mkdir curl chmod rm"
for mandatory_cmd in ${DIRENV_CMD_DEPENDENCIES}; do
  if [ -z "$(which ${mandatory_cmd})" ]; then
    echo "===> Mandatory command not found: ${mandatory_cmd}"
    exit 1
  fi
done

#
# Other configuration
# =====================
#

export DIRENV_TMP_DIR="${PWD}/.direnv"
export DIRENV_BIN_DIR="${DIRENV_TMP_DIR}/bin"
if [ ! -e "${DIRENV_BIN_DIR}" ]; then
  mkdir -p "${DIRENV_BIN_DIR}"
fi
export PATH="${DIRENV_BIN_DIR}:${PATH}"

#
# Python configuration
# =====================
#

export PYTHON_VERSION=${PYTHON_VERSION:-"3.10.7"}

#
# Python pyenv installation
# ==========================
#
PYENV_PKG_URL="https://pyenv.run"
if [ ! -e "${HOME}/.pyenv/bin/pyenv" ]; then
  echo "===> Getting pyenv (can take a while to execute)"
  curl -s -L "${PYENV_PKG_URL}" | bash
  echo "===> Run : pyenv init"
  echo "===> Run : pyenv local ${PYTHON_VERSION}"
fi

#
# Python 2 requirements
# ==========================
#
if command -v pyenv; then
  for VERSION in $(pyenv versions --bare | egrep '^2.') ; do
    pyenv shell ${VERSION} ;
    pip install py2venv ;
  done
fi

export VENV_TMP_DIR="${PWD}/.venv"
export VENV_BIN_DIR="${VENV_TMP_DIR}/bin"

# check if python version is set in current dir
# .python-version will be created by : pyenv local ${PYTHON_VERSION}
if [ -f ".python-version" ] ; then
  if [ ! -d "${VENV_TMP_DIR}" ] ; then
    echo "Installing virtualenv for $(cat .python-version)"
    # if we didn't install `py2venv` for python 2.x, we would need to use
    # `virtualenv`, which you would have to install separately.
    python -m venv ${VENV_TMP_DIR}
  fi
  echo "Activating $(cat .python-version) virtualenv"
  source ${VENV_BIN_DIR}/activate
  # announce python version and show the path of the current python in ${PATH}
  echo "Virtualenv has been activated for $(cat .python-version)"
  #echo "$(which python)"
fi

if command -v pyenv >/dev/null 2>&1; then
  # layout pyenv ${PYTHON_VERSION}
  layout pyenv
else
  layout_python3
# layout_anaconda
fi

#
# Direnv configuration
# =====================
#

DIRENV_PYTHON_LIBS_DIR_RELATIVE="$(find ${DIRENV_TMP_DIR} -type d -name site-packages)"
# python package are in venv
if [ ! -e "${DIRENV_PYTHON_LIBS_DIR_RELATIVE}" ]; then
  DIRENV_PYTHON_LIBS_DIR_RELATIVE="$(find ${VENV_TMP_DIR} -type d -name site-packages)"
fi
export DIRENV_PYTHON_LIBS_DIR="$(realpath ${DIRENV_PYTHON_LIBS_DIR_RELATIVE})"

if command -v pyenv >/dev/null 2>&1; then
  #
  # Python pip requirements
  # ==========================
  #
  for VERSION in $(pyenv versions --bare | egrep '^2.') ; do
    pyenv shell ${VERSION} 2>/dev/null ;
    pip install py2venv ;
  done

  #
  # Python pip upgrade
  # ==========================
  #
  # curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
  #for VERSION in $(pyenv versions --bare) ; do
  #  pyenv shell ${VERSION} 2>/dev/null ;
  #  pip install --upgrade pip ;
  #done
fi

# if pyenv and venv
if [ -f ".python-version" ] ; then
  #
  # Python pipenv installation
  # ==========================
  #
  # python -m pip install pipenv==2022.6.7
  PIPENV_VERSION=${PIPENV_VERSION:-"2022.6.7"}
  if [ ! -e "${VENV_BIN_DIR}/pipenv" ]; then
    echo "===> Getting pipenv:${PIPENV_VERSION} (can take a while to execute)"
    python -m pip install pipenv=="${PIPENV_VERSION}"
  fi

  #
  # Python 3 requirements
  # ==========================
  #
  python -m pipenv install --dev --site-packages --ignore-pipfile 2>/dev/null

  #
  # Below install what you do not have already in Pipfile.lock or requirements.txt
  # ==========================

  #
  # Python pre-commit installation
  # ==========================
  #
  # python -m pip install pre-commit==2.19.0
  PRECOMMIT_VERSION=${PRECOMMIT_VERSION:-"2.19.0"}
  if [ ! -e "${VENV_BIN_DIR}/pre-commit" ]; then
    echo "===> Getting pre-commit:${PRECOMMIT_VERSION} (can take a while to execute)"
    python -m pip install pre-commit=="${PRECOMMIT_VERSION}"
  fi

  #pre-commit install 2>/dev/null || true

  #
  # Ansible CLI installation
  # ==========================
  #
  # python -m pip install --user https://github.com/ansible/ansible/archive/stable-2.13.tar.gz
  ANSIBLE_VERSION=${ANSIBLE_VERSION:-"2.13"}
  ANSIBLE_PKG_URL="https://github.com/ansible/ansible/archive/stable-${ANSIBLE_VERSION}.tar.gz"
  if [ ! -e "${VENV_BIN_DIR}/ansible" ]; then
    echo "===> Getting ansible:${ANSIBLE_VERSION} (can take a while to execute)"
    python -m pip install "${ANSIBLE_PKG_URL}"
  fi

  #
  # Ansible configuration
  # =====================
  #
  export ANSIBLE_LIBRARY="${PWD}/plugins/modules:${ANSIBLE_LIBRARY}"
  #export ANSIBLE_SSH_ARGS="-F ${PWD}/ssh.cfg"
  #export ANSIBLE_INVENTORY="hosts"
  export ANSIBLE_COLLECTIONS_PATHS="${DIRENV_TMP_DIR}"

fi

#
# Environment configuration
# =========================
#
#
ENV_ADDONS=".env.local .env.secrets"
for addon in ${ENV_ADDONS}; do
  if [ -e "${PWD}/${addon}" ]; then
    source ${PWD}/${addon}
  fi
done

# See https://github.com/direnv/direnv/wiki/PS1
unset PS1
