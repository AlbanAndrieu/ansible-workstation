---
# This playbook contains common plays that will be run on all nodes.

- name: workstation | Update the apt cache (in case of issue)
  action: apt update-cache=yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  become: yes

- name: workstation | Make sure multiverse is enabled for tools
  apt_repository: repo="deb {{ item }} {{ansible_lsb.codename}} universe multiverse" state=present update_cache=yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['14.04', '16.04', '17.04'] and apt_install_multiverse_repositories
  with_items: apt_multiverse_repositories
  become: yes
  ignore_errors: true

- name: workstation | Install apt tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['12.04']
  tags: package
  with_items:
   - apt-show-versions
   - apt-listchanges

#TODO
#- name: workstation | Install apt cache tools
#  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
#  tags: package
#  with_items:
#   - apt-cacher-ng
#
#/etc/apt-cacher-ng/acng.conf
## uncomment and change the following lines
#CacheDir: /var/cache/apt-cacher-ng
#LogDir: /var/log/apt-cacher-ng
#Port:3142
#
##add  for java
#PfilePattern = .*(\.d?deb|\.rpm|\.drpm|\.dsc|\.tar(\.gz|\.bz2|\.lzma|\.xz)(\.gpg|\?AuthParam=.*)?|\.diff(\.gz|\.bz2|\.lzma|\.xz)|\.jigdo|\.template|changelog|copyright|\.udeb|\.debdelta|\.diff/.*\.gz|(Devel)?ReleaseAnnouncement(\?.*)?|[a-f0-9]+-(susedata|updateinfo|primary|deltainfo).xml.gz|fonts/(final/)?[a-z]+32.exe(\?download.*)?|/dists/.*/installer-[^/]+/[0-9][^/]+/images/.*)$
#RequestAppendix: Cookie: oraclelicense=a
#
##add for docker
#PassThroughPattern: ^download.docker.com:443$

- include: editor.yml

#Install Ubuntu After Install on Ubuntu 15.04
#http://www.ubuntugeek.com/ubuntu-after-install-automated-installation-of-useful-extra-software-on-ubuntu.html
- name: workstation | Install ubuntu-after-install tools PPA
  apt_repository: repo='ppa:thefanclub/ubuntu-after-install' update_cache=yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['16.04']
  become: yes
  tags: uai

- name: workstation | Install ubuntu-after-install tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['16.04']
  tags: package
  with_items:
   - ubuntu-after-install

#TODO run UAI by hand

- name: workstation | Install extra
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - ubuntu-restricted-extras
#lsb_release -a
   - lsb-core

- name: workstation | Install debian packaging tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - ubuntu-dev-tools #reverse-depends -b scons

- name: workstation | Install utilities tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - sshpass
   - ssh-askpass
   - gnome-terminal
   - meld
   - gnome-tweak-tool #fix for meld
   - dos2unix
# xclip -selection clipboard < ~/.ssh/id_rsa.pub
   - xclip
   - rar
#TODO http://linuxg.net/how-to-install-peazip-5-3-1-on-ubuntu-14-04-linux-mint-17-elementary-os-0-3-and-pinguy-os-14-04/
#wget https://github.com/giorgiotani/PeaZip/releases/download/6.4.0/peazip_6.4.0.LINUX.Qt-2_all.deb
#wget https://github.com/giorgiotani/PeaZip/releases/download/6.4.0/peazip_6.4.0.LINUX.GTK2-2_all.deb
#NOK sudo dpkg -i peazip_6.4.0.LINUX.Qt-2_all.deb
#NOK sudo gdebi peazip_6.4.0.LINUX.GTK2-2_all.deb
   - manpages-fr
   - manpages-fr-extra
# man with color
   - most
   - colordiff
   - colormake
# Colorize log tools
   - multitail
   - grc
   - ccze
   - imagemagick
   - stress
#https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/
   - screen
# Screenshot shutter
   - shutter

- name: workstation | Create .config/autostart folder
  file: path={{ home }}/.config/autostart mode=0777 state=directory recurse=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')

- name: synergy | Configure synergy startup launcher from command line
  template: src=synergy.desktop.j2 dest={{ home }}/.config/autostart/synergy.desktop mode=0755
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' )
  tags: configure

- include: health.yml

#https://askubuntu.com/questions/598195/how-to-add-a-script-to-startup-applications-from-the-command-line
- name: redshift | Configure redshift startup launcher from command line
  template: src=redshift-gtk.desktop.j2 dest={{ home }}/.config/autostart/redshift-gtk.desktop mode=0755
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' )
  tags: configure

- name: plank | Configure plank startup launcher from command line
  template: src=plank.desktop.j2 dest={{ home }}/.config/autostart/plank.desktop mode=0755
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' )
  tags: configure

#- name: plank | Configure dropbox startup launcher from command line
#  template: src=dropbox.desktop.j2 dest={{ home }}/.config/autostart/dropbox.desktop mode=0755
#  become: yes
#  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' )
#  tags: configure

- name: lightdm | Configure lightdm
  template: src=01_nabla.conf.j2 dest=/usr/share/lightdm/lightdm.conf.d/01_nabla.conf mode=0755
  become: yes
  ignore_errors: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' )
  tags: configure

- include: printing.yml

- name: workstation | Install memory utilities tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - edac-utils

- include: desktop.yml

- name: workstation | Install desktop tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04', '14.04', '16.04']
  tags: package
  with_items:
   - software-center

- name: workstation | Install disk/recovery tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - testdisk
   - gparted
   - unetbootin
   - usbmount
   - remmina

- name: workstation | Install disk/hdd tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
# work both on ubuntu and RedHat
  tags: package
  with_items:
   - system-storage-manager
   - baobab
   
- name: workstation | Install disk/hdd tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - system-config-lvm

- name: workstation | Install system-config-lvm for gcc
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ jenkins_pkg_state|default('present') }}"
  with_items:
   - system-config-lvm
  tags: cpp
#CentOS only  
  when: (ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat')  
#  when: (ansible_distribution == 'RedHat' and ansible_distribution_major_version == '7')
  become: yes
  ignore_errors: true   
   
#TODO move git to a role
- name: workstation | Install SCM
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and scm_enabled
  tags: package
  with_items:
   - cvs
   - git
#   - gitg
#   - gitk
#   - mercurial

- name: workstation | Install gnuplot tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and scm_enabled
  tags: package
  with_items:
   - gnuplot
   - python-gnuplot

#TODO create a role for scons
- name: workstation | Install CPP scons build tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and scons_enabled
  tags: package
  with_items:
   - scons

- name: workstation | Install Java ant build tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - ant
   - ant-contrib

- name: workstation | Add repo for aws packages
  apt_repository: repo="ppa:awstools-dev/awstools" state={{ util_repository_state|default('present') }} update_cache=yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and (ansible_distribution_version not in ['14.04', '17.04'])
  tags: package

- name: workstation | Install AWS tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04']) and aws_enabled
  tags: package
  with_items:
   - ec2-api-tools
   - s3cmd

- name: workstation | Install Samba tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and smb_enabled
  tags: package
  with_items:
   - samba
   - samba-common
   - python-glade2
   - system-config-samba
   - smbclient

- name: workstation | Install certificates tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - libnss3-tools # for certutil
   - apt-transport-https
   - ca-certificates

- include: pidgin.yml

#TODO install sky
#See https://www.tel.red/repos.htm

#sudo sed -i '/https\?:\/\/.*\btel.red\b/d' /etc/apt/sources.list
#sudo sh -c 'echo deb https://tel.red/repos/ubuntu xenial non-free \
#    > /etc/apt/sources.list.d/telred.list'
#sudo apt-key adv \
#    --keyserver hkp://keyserver.ubuntu.com:80 \
#    --recv-keys 9454C19A66B920C83DDF696E07C8CCAFCE49F8C5
# sudo apt-get update
# sudo apt-get install sky

- name: workstation | Install VNC
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and vnc_enabled
  tags: package
  with_items:
   - vnc4server

#Warning might be in conflict with security profile
- name: workstation | Install stats basic tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - htop
    - finger
    - sysstat
    - net-tools # for netstat
#    - rusersd
    - rusers
#    - rwho
#    - rwhod
#check ssl
#sslscan --no-failed --ssl3 localhost:443
#    - sslscan
    - curl
    - wget
    - rsync
    - unar
    - pydf #disk
   
- name: workstation | Install Ubuntu make tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['12.04', '13.04', '14.04', '16.04'] and make_enabled
  tags: package
  with_items:
    - ubuntu-make

- name: workstation | Install debug basic tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version not in ['12.04', '13.04', '14.04', '16.04'] and stats_enabled
  tags: package
  with_items:
    - strace
    - yp-tools #ypcat hosts | grep ilo

#https://doc.ubuntu-fr.org/webcam
#lsusb | grep -i logitech

#See https://wenchaojames.wordpress.com/2013/01/03/convert-video-format-mts-to-mp4-in-ubuntu/
#- name: workstation | Install mts to mp4 converter tools
#  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
#  tags: package
#  with_items:
#    - libav-tools #avconv -i input.mts -qscale 1 -strict experimental output.mp4

- name: workstation | Install webcam tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and webcam_enabled
  tags: package
  with_items:
#    - libv4l-0
#    - libv4l-dev
#http://blog.nicolargo.com/2013/05/streaming-depuis-la-raspberry-camera.html
#    - gstreamer-properties
    - guvcview
    - cheese
    - camorama
#    - gphoto2

- name: video | Add repo for gstreamer packages
  apt_repository: repo="ppa:mc3man/trusty-media" state={{ util_repository_state|default('present') }} update_cache=yes
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version in ['14.04'] and gstreamer_enabled
  tags: gstreamer_setup

- name: video | Install gstreamer packages
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04','14.04'] and gstreamer_enabled
  tags: gstreamer_setup
  with_items:
    - gstreamer0.10-ffmpeg

- name: workstation | Install webcam tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04','14.04'] and gstreamer_enabled
  tags: gstreamer_setup
  with_items:
    - gstreamer0.10-plugins-base
    - gstreamer0.10-plugins-good
    - gstreamer0.10-plugins-bad
    - gstreamer0.10-plugins-ugly

- name: workstation | Install webcam tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['16.04'] and gstreamer_enabled
  tags: gstreamer_setup
  with_items:
    - gstreamer1.0-plugins-base
    - gstreamer1.0-plugins-good
    - gstreamer1.0-plugins-bad
    - gstreamer1.0-plugins-ugly

- name: workstation | Install network security basic tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - tcpdump
#https://doc.ubuntu-fr.org/httrack
#    - httrack
#    - httraqt
#    - webhttrack
#Spoofing ARP
    - dsniff
    - arpalert
#Pyhton proxy
    - mitmproxy
#WEP WPA cracker
    - aircrack-ng

- name: workstation | Install security basic tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - testdisk
#    - photorec
    - chkrootkit
#sudo chkrootkit
    - rkhunter
#sudo rkhunter --check --rwo --pkgmgr dpkg
#update your system
#sudo rkhunter --propupd
#TODO    - burp
#TODO    - mig
#See https://tools.pentestbox.com/ on windows
#https://github.com/stasinopoulos/commix
#see : https://blog.anantshri.info/ironwasp-on-linux/
#wget https://blog.anantshri.info/content/uploads/2013/01/ironwasp_installer.sh.txt -O ~/ironwasp_installer.sh && sh ~/ironwasp_installer.sh
#see https://github.com/0xsauby/yasuo
#sudo gem install ruby-nmap net-http-persistent mechanize text-table

#TODO
#http://www.iss.net/security_center/advice/Services/SunRPC/rpc.rusersd/default.htm

#See BackBox https://backbox.org/
#TODO
#sudo apt-get purge ri1.9.1 ruby1.9.1 ruby1.9.3 bundler
#sudo gem cleanup
#sudo rm -rf /var/lib/gems/1.*
- name: video | Add repo for security pentest packages
  apt_repository: repo="ppa:backbox/four" state={{ util_repository_state|default('present') }} update_cache=yes
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version in ['14.04', '16.04'] and backbox_enabled
  tags: gstreamer_setup

- name: workstation | Install security pentest tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['16.04'] and backbox_enabled
  tags: package
  with_items:
    - beef-project
    - metasploit-framework
    - whatweb
#    - wpscan
    - setoolkit
    - openvas
    - sqlite3
#https://null-byte.wonderhowto.com/how-to/hack-like-pro-crack-online-passwords-with-tamper-data-thc-hydra-0155374/
    - hydra-gtk
  become: yes
#sudo apt-get install --install-recommends linux-generic-lts-xenial xserver-xorg-core-lts-xenial xserver-xorg-lts-xenial xserver-xorg-video-all-lts-xenial xserver-xorg-input-all-lts-xenial libwayland-egl1-mesa-lts-xenial

- name: workstation | Install security antivirus tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - clamav
    - clamav-daemon
    - clamtk
    - tiger

#sudo freshclam
#clamscan -r --bell -i /
#Schedule a scan tommorrow
#at 3:30 tomorrow
#clamscan -i / | mail alban.andrieu@free.fr
#<CTRL-D>

#https://askubuntu.com/questions/645097/installing-sophos-anti-virus

- name: workstation | Install network tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - gnome-nettool
    - gnome-system-tools
#TODO create a role
#    - wireshark
    - nmap
    - zenmap
    - dnsutils #nslookup
#TODO install fing
#http://www.overlooksoft.com/getfing4linux?plat=lx64&ext=deb
#sudo fing
#TODO install angryip
#http://angryip.org/about/
#http://quehow.com/how-to-monitor-your-network-traffic-in-ubuntu-14-04/6904.html
#sudo apt-get install knemo

#- name: workstation | Install utilities tools
#  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
#  tags: package
#  with_items:
#    - linux-disk-cleaner

- name: workstation | Install performance tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
#    - jmeter
    - optipng
    - pngtools
    - imagemagick
#sudo nethogs eth1
    - nethogs

- name: workstation | Install vpn tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - network-manager-openconnect

##
 # node.js installation (latest stable instead of Ubuntu's out-of-date one)
 #
- name: nodejs | Package prerequisites for node.js
  action: apt pkg=python-software-properties state=installed
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  tags: nodejs

#- name: add node.js repos
- name: nodejs | Add the node.js PPA
#  action: command add-apt-repository -y ppa:chris-lea/node.js creates=/etc/apt/sources.list.d/custom-node_js-{{ ansible_lsb.codename }}.list
  apt_repository: repo='ppa:chris-lea/node.js' update_cache=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  tags: nodejs

- name: nodejs | Install nodejs and npm
  action: apt pkg={{ item }} state=installed
  become: yes
  tags: nodejs
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  with_items:
    - nodejs
#WARNING DO NOT INSTALL    - node

- name: karma | Install karma tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  with_items:
   - karma-tools

# NPM may or may not succeed, if you give it time, care, etc. it eventually works

- name: npm | Ensure npm settings
  command: chdir=/usr/bin npm config set prefix /usr/local
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: npm | Ensure npm is properly installed
  command: chdir=/usr/bin npm config get prefix
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: grunt | Ensure the grunt npm dependencies are installed
  npm: >
    name={{ item }}
    state=present
    global=yes
    version={{ grunt_version }}
  with_items:
    - grunt
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: grunt | Ensure the grunt-cli npm dependencies are installed
  npm: >
    name={{ item }}
    state=present
    global=yes
    version={{ grunt_cli_version }}
  with_items:
    - grunt-cli
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

#- name: bower | Ensure the bower npm dependencies are installed
#  command: chdir=/usr/bin npm install -g bower@1.3.2
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: bower | Ensure the bower npm dependencies are installed
  npm: >
    name={{ item }}
    state=present
    global=yes
    version={{ bower_version }}
  with_items:
    - bower
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: bower | Clean cache
  command: bower cache clean
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled and bower_clean_cache_enabled

#- name: bower | Ensure the other npm dependencies are installed
#  npm: >
#    name={{ item }}
#    state=present
#    global=yes
#  with_items:
#    - phantomjs
#    - yslow
#    - psi
#    - webpagetest
#    - phantomas
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

#- name: protractor | Ensure the protractor npm dependencies are installed
#  command: chdir=/usr/bin npm install -g protractor@0.20.1
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
#
#- debug: msg="ansible_distribution_version value is {{ ansible_distribution_version }} "
#- debug: msg="ansible_distribution_release is {{ ansible_distribution_release }} "
#
#- name: workstation | Ensure the karma npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma@0.12.9
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
##  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' )  and ( ansible_distribution_release != 'precise' )

#Ubuntu 12 ln -s /usr/local/lib/node_modules/karma/bin/karma /usr/local/bin/karma
#- name: workstation | Create karma binaries link (legacy required)
#  file: path=/usr/local/bin/karma src=/usr/local/lib/node_modules/karma/bin/karma state=link
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')

#TODO below does not works
#- name: workstation | Update karma rights
#  file: path=/usr/local/lib/node_modules mode=0777 owner=root group=root state=directory recurse=yes
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')

#TODO WORKAROUND by hand
#cd /usr/local/bin
#ln -s ../lib/node_modules/karma/bin/karma karma

#cd /usr/local/lib/node_modules
#chown -R nobody:jenkins *

#- name: workstation | Ensure the karma-junit-reporter npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-junit-reporter@0.2.2
#  become: yes
#
#- name: workstation | Ensure the karma-ng-scenario npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-ng-scenario@0.1.0
#  become: yes
#
#- name: workstation | Ensure the karma-ng-html2js-preprocessor npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-ng-html2js-preprocessor@0.1.0
#  become: yes
#
#- name: workstation | Ensure the karma-coverage npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-coverage@0.2.1
#  become: yes
#
#- name: workstation | Ensure the karma-jasmine npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-jasmine@0.1.5
#  become: yes
#
#- name: workstation | Ensure the jasmine-reporters npm dependencies are installed
#  command: chdir=/usr/bin npm install -g jasmine-reporters@0.4.1
#  become: yes
#
#- name: workstation | Ensure the phantomjs npm dependencies are installed
#  command: chdir=/usr/bin npm install -g phantomjs@1.9.2-4
#  become: yes
#
#- name: workstation | Ensure the karma-requirejs npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-requirejs@0.2.1
#  become: yes
#
##- name: workstation | Ensure the karma-phantomjs-launcher npm dependencies are installed
##  command: chdir=/usr/bin npm install -g karma-phantomjs-launcher@0.1.4
##  become: yes
#
#- name: workstation | Ensure the karma-chrome-launcher npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-chrome-launcher@0.1.3
#  become: yes
#
#- name: workstation | Ensure the karma-firefox-launcher npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-firefox-launcher@0.1.3
#  become: yes
#
#- name: workstation | Ensure the karma-ie-launcher npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-ie-launcher
#  become: yes
#
##- name: workstation | Ensure the webdriverjs npm dependencies are installed
##  command: chdir=/usr/bin npm install -g webdriverjs
##  become: yes

##
 # Coffee script
 #
#description: Install "coffee-script" node.js package.
#- npm: name=coffee-script path=/app/location
#
#description: Install "coffee-script" node.js package on version 1.6.1.
#- npm: name=coffee-script version=1.6.1 path=/app/location
#
#description: Install "coffee-script" node.js package globally.
#- npm: name=coffee-script global=yes
#
#description: Remove the globally package "coffee-script".
#- npm: name=coffee-script global=yes state=absent
#
#description: Install packages based on package.json.
#- npm: path=/app/location
#
#description: Update packages based on package.json to their latest version.
#- npm: path=/app/location state=latest
#
#description: Install packages based on package.json using the npm installed with nvm v0.10.1.
#- npm: path=/app/location executable=/opt/nvm/v0.10.1/bin/npm state=present

- name: workstation | Mount | Disable mount points
  mount: >
    name='{{ item }}'
    src='/mnt/dpool{{ item }}'
    fstype=nfs
    state=unmounted
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and mount_enabled
  tags: mount
  with_items:
    - /image
    - /owncloud

#    opts=rw,nodev,nosuid,soft,bg,intr,-r16384,-w16384
- name: workstation | Mount | Setup mount points
  mount: >
    name='{{ item }}'
    src='/mnt/dpool{{ item }}'
    fstype=nfs
    state=mounted
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and mount_enabled
  tags: mount
  with_items:
    - /media/ftp
    - /media/photo
    - /media/music
    - /media/video
    - /archive
    - /backup

# Mount up device by UUID
#TODO iSCSI
#- name: workstation | Mount | Setup mount points
#  mount:
#    name:/home src='UUID=b3e48f45-f933-4c8e-a700-22a159ec9077'
#    fstype:xfs
#    opts:noatime
#    state:present
#  become: yes
#  tags: mount
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and mount_enabled

##
 # Unity package
 #
- name: keepass2 | Add keepass2 repo
  apt_repository: repo="ppa:jtaylor/keepass" update_cache=yes state={{ util_repository_state|default('present') }}
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version in ['14.04', '16.04'] and keepass2_enabled
  tags: keepass2_setup

- name: keepass2 | Install keepass2 packages
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['14.04', '16.04'] and keepass2_enabled
  tags: keepass2_setup
  with_items:
    - keepass2
#    - keepassx

- name: skype | Install skype fixes
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and skype_enabled
  tags: skype_setup
  with_items:
    - gtk2-engines-murrine:i386
    - gtk2-engines-pixbuf:i386
    - sni-qt:i386
    - libjpeg62:i386
#
##sudo apt-add-repository ppa:pipelight/stable
##sudo apt-get update
##sudo apt-get install pipelight-multi
##sudo pipelight-plugin --enable silverlight
##sudo pipelight-plugin --enable widevine
#
#sudo apt-get install pepperflashplugin-nonfree
#sudo update-pepperflashplugin-nonfree --install
#
##gsettings set org.gnome.nautilus.preferences enable-interactive-search false
##gsettings set org.gnome.nautilus.preferences enable-interactive-search true
#
#sudo add-apt-repository ppa:linrunner/tlp
#sudo apt-get update
#sudo apt-get remove laptop-mode-tools
#sudo apt-get install tlp tlp-rdwsudo tlp start
#
#sudo apt-get install ubuntu-restricted-extras
#sudo apt-get install libavcodec-extra
#sudo apt-get install libdvdread4sudo /usr/share/doc/libdvdread4/install-css.sh
#
#sudo add-apt-repository ppa:alessandro-strada/ppa
#sudo apt-get update
#sudo apt-get install google-drive-ocamlfuse
#google-drive-ocamlfuse
#mkdir ~/gdrive
#google-drive-ocamlfuse ~/gdrive
#
#sudo add-apt-repository ppa:danjaredg/jayatana
#sudo apt-get update
#sudo apt-get install jayatana

- include: laptop.yml

#http://www.omgubuntu.co.uk/2016/04/10-things-to-do-after-installing-ubuntu-16-04-lts
#gsettings set org.compiz.unityshell:/org/compiz/profiles/unity/plugins/unityshell/ launcher-minimize-window true
##gsettings set com.canonical.Unity.Launcher launcher-position Bottom

- name: cleaning | Add cleaning tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: cleaning
  with_items:
    - bleachbit

#########################

#TODO for tomcat7 to work on eclipse
##cd ~/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/
##rm org.eclipse.jst.server.tomcat.core.prefs
##rm org.eclipse.wst.server.core.prefs

#cd /usr/share/tomcat7
#sudo service tomcat7 stop
#sudo update-rc.d tomcat7 disable
#sudo ln -s /var/lib/tomcat7/conf conf
#sudo ln -s /etc/tomcat7/policy.d/03catalina.policy conf/catalina.policy
#sudo ln -s /var/log/tomcat7 log
#sudo chmod -R 777 /usr/share/tomcat7/conf
#sudo ln -s /var/lib/tomcat7/common common
#sudo ln -s /var/lib/tomcat7/server server
#sudo ln -s /var/lib/tomcat7/shared shared

- include: apache.yml

- name: Check user
  user: name={{ variety_owner }} state=present

- name: Check user home directory
  stat: path={{ variety_owner_home }}
  register: home_present

- debug: msg="Path exists and is a directory"
  when: home_present.stat.isdir is defined and home_present.stat.isdir == true

- name: variety | Create base directory
  file:
    dest="{{ variety_directory }}"
    state=directory
    owner="{{ variety_owner }}"
    group="{{ variety_group }}"
  ignore_errors: true
#  sudo_user: "{{ variety_owner }}"
  tags: variety_setup

- name: variety | Add variety configuration.
  template:
    src: "variety.conf.j2"
    dest: "{{ variety_directory }}/variety.conf"
    owner: "{{ variety_owner }}"
    group: "{{ variety_group }}"
    mode: 0644
  ignore_errors: true
#  notify: restart variety

- name: dropbox | Create user directory
  file:
    dest="{{ dropbox_user_directory }}"
    state=directory
    owner="{{ dropbox_owner }}"
    group="{{ dropbox_group }}"
  ignore_errors: true
  tags: dropbox_setup

- name: dropbox | Create base directory
  file:
    dest="{{ dropbox_directory }}"
    state=directory
    owner="{{ dropbox_owner }}"
    group="{{ dropbox_group }}"
  ignore_errors: true
  tags: dropbox_setup

- name: dropbox | Add dropbox configuration.
  template:
    src: "info.json.j2"
    dest: "{{ dropbox_directory }}/info.json"
    owner: "{{ dropbox_owner }}"
    group: "{{ dropbox_group }}"
    mode: 0644
  ignore_errors: true
#  notify: restart dropbox

- name: nextcloud | Install webdav tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04'])
  tags: plank
  with_items:
   - davfs2

- include: python.yml

- name: workstation | Add repo for plank packages
  apt_repository: repo="ppa:ricotz/docky" state={{ util_repository_state|default('present') }} update_cache=yes
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and (ansible_distribution_version not in ['12.04', '17.04']) and plank_enabled
  tags: plank

- name: workstation | Install plank
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04']) and plank_enabled
  tags: plank
  with_items:
   - plank

- name: workstation | Install gnome sushi
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04'])
  tags: android
  with_items:
   - gnome-sushi

- name: workstation | Install android sdk
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04']) and android_enabled
  tags: android
  with_items:
#   - gnome-phone-manager
   - android-tools-adb
   - android-tools-fastboot

- name: workstation | Install docker tool
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04']) and docker_enabled
  tags: docker
  with_items:
   #- "linux-image-extra-$(uname -r)"
   #- "linux-image-extra-virtual"
   - auditd
   - cpuset #sudo cset set -l

#Add https://github.com/GovReady/ubuntu-scap
- name: workstation | Install ubuntu-scap prerequisite
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04']) and docker_enabled
  tags: docker
  with_items:
   - libopenscap8
#   - scap-workbench
   - lynx

- name: workstation | Install docker requirement
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04','14.04'])
  tags: android
  with_items:
   - apparmor-utils
   - cgroup-tools

#See https://help.ubuntu.com/community/UbuntuStudioPreparation
- name: workstation | Install Ubuntu studio requirement
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04'])
  tags: android
  with_items:
   - vlc
   - ubuntu-restricted-extras
   - ubuntustudio-menu
   - cdrdao

- name: workstation | Install gimp requirement
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04'])
  tags: android
  with_items:
   - gimp
   - gimp-data-extras
   - gimp-lensfun
   - gimp-texturize
   - create-resources
   - inkscape
   - ink-generator
#   - darktable

#sudo apt-get install gucharmap

- name: workstation | Install font unicode utf8 requirement
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04'])
  tags: android
  with_items:
   - fontforge
   - fontforge-extras
   - ttf-ancient-fonts

#sudo apt-get install ubuntu-restricted-extras ttf-mscorefonts-installer

#http://www.omgubuntu.co.uk/2016/05/emoji-one-font-linux-ppa-easy-install
#sudo add-apt-repository ppa:eosrei/fonts
#sudo apt update && sudo apt install fonts-emojione-svginot

- name: workstation | Install eclipse javaHL requirement
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04'])
  tags: eclipse
  with_items:
   - libsvn-java

- name: workstation | Install wine requirement
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version in ['12.04', '14.04', '16.04'])
  with_items:
   - wine
   - winetricks

- name: workstation | Install wine requirement
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version in ['17.04'])
  with_items:
   - wine-stable
   - winetricks

#TODO
#http://www.webupd8.org/2012/01/install-picasa-39-in-linux-and-fix.html
#cd && wget http://dl.google.com/picasa/picasa39-setup.exe
#wine picasa39-setup.exe

- name: workstation | Install xhost+ requirement
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: android
  with_items:
   - x11-xserver-utils

- name: workstation | Install c++ requirement
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: android
  with_items:
   - valgrind
   - valkyrie
   - google-perftools
   - clang
   - flawfinder
   - cppcheck
   - ggcov
   - gperf
   - doxygen
   
- name: workstation | Install c++ requirement
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04', '14.04'])
  tags: android
  with_items:
   - rpmlint
   - complexity #for c
   
- name: workstation | Install shell requirement
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: android
  with_items:
   - shellcheck

#http://stackoverflow.com/questions/36826277/ubuntu-16-04-built-in-back-up-app-deja-dup-wont-work
- name: workstation | Fix automatic backup issue
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version in ['16.04'])
  tags: android
  with_items:
   - duplicity

- name: workstation | Add backup tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version in ['16.04'])
  tags: android
  with_items:
   - aptoncd
#   - clonezilla

- name: workstation | Add grub customizer ppa
  apt_repository: repo="ppa:danielrichter2007/grub-customizer" state={{ util_repository_state|default('present') }} update_cache=yes
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and (ansible_distribution_version not in ['12.04', '14.04']) and grub_customizer_enabled
  tags: grub_customizer

- name: workstation | Add grub tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04', '14.04', '17.04']) and grub_customizer_enabled
  tags: grub_customizer
  with_items:
   - grub-customizer

- name: workstation | Add speed tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04', '14.04'])
  with_items:
   - preload
   - ureadahead

- name: workstation | Add perl tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04', '14.04'])
  with_items:
   - perl-doc

#- name: workstation | Add apt-fast ppa
#  apt_repository: repo="ppa:apt-fast/stable" state={{ util_repository_state|default('present') }} update_cache=yes
#  become: yes
#  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and (ansible_distribution_version not in ['12.04', '14.04', '16.04'])
#
#- name: workstation | apt-fast speed tools
#  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04', '14.04', '16.04'])
#  with_items:
#   - apt-fast

#See https://doc.ubuntu-fr.org/multisystem
- name: workstation | Add repo for multisystem
  apt_repository: repo="deb http://liveusb.info/multisystem/depot all main" state=present update_cache=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['17.04'])
  tags: multisystem

# Place to get apt repository key
#apt_key_url: https://symless.com/gpg
# apt repository key signature
#apt_key_sig: "Free download"

#- name: workstation | Add multisystem repository key
#  apt_key:
#    id: "{{ apt_key_sig }}"
#    url: "{{ apt_key_url }}"
#    state: present
#  register: add_repository_key
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
#  tags: multisystem
#  ignore_errors: true

- name: workstation | Alternative | Add multisystem repository key
  shell: wget -q http://liveusb.info/multisystem/depot/multisystem.asc -O- | sudo apt-key add -
  tags: multisystem
#  when: add_repository_key|failed

- name: workstation | Install multisystem
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['14.04','16.04','17.04'])
  tags: multisystem
  with_items:
   - multisystem

#See https://www.reddit.com/r/Ubuntu/comments/3rwhye/why_is_avahidaemon_still_included_in_default/
#Uninstall avahi-daemon
- name: workstation | Uninstall avahi-daemon
  apt: >
    pkg={{ item }}
    state=absent
    purge=yes
    force=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - avahi-daemon

#http://quehow.com/how-to-add-screensavers-in-ubuntu-14-04/6606.html
#Uninstall default black screensaver
- name: workstation | Uninstall default black screensaver
  apt: >
    pkg={{ item }}
    state=absent
    purge=yes
    force=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and screensaver_enabled
  tags: package
  with_items:
   - gnome-screensaver

- name: workstation | Install screensaver
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and screensaver_enabled
  tags: package
  with_items:
   - xscreensaver
   - xscreensaver-data-extra
   - xscreensaver-gl-extra

- name: workstation | Uninstall whoopsie packages
  apt: >
    pkg={{ item }}
    state=absent
    purge=yes
    force=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
    - whoopsie

- name: workstation | Uninstall zeitgeist packages
  apt: >
    pkg={{ item }}
    state=absent
    purge=yes
    force=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: zeitgeist_setup
  with_items:
    - zeitgeist
    - zeitgeist-datahub
    - rhythmbox-plugin-zeitgeist

- name: workstation | Uninstall cinnamon desktop packages
  apt: >
    pkg={{ item }}
    state=absent
    purge=yes
    force=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and not cinnamon_enabled
  tags: desktop_setup
  with_items:
    - cinnamon

- name: workstation | Uninstall desktop plasma packages
  apt: >
    pkg={{ item }}
    state=absent
    purge=yes
    force=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and not plasma_enabled
  tags: desktop_setup
  with_items:
    - plasma-desktop

- name: workstation | Uninstall xfce plasma packages
  apt: >
    pkg={{ item }}
    state=absent
    purge=yes
    force=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and not xfce_enabled
  tags: desktop_setup
  with_items:
    - xfce4
    - xfce4-goodies
    - xubuntu-desktop

- name: workstation | Uninstall unused applications
  apt: >
    pkg={{ item }}
    state=absent
    purge=yes
    force=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
    - modemmanager
    - thunderbird

#for virtualmin
#sudo apt-get install krb5-kdc krb5-admin-server
#RAID
#http://michal.karzynski.pl/blog/2009/11/18/mdadm-gui-via-webmin/
#sudo apt install mdadm
#Logical Volume Management
#sudo apt-get install lvm2
#vgdisplay

#TODO
#sudo usermod -a -G adm "$USER"

#TODO
#sudo apt-get install motion

- include: fun.yml

#- name: workstation | Install lowlatency kernel
#  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04'])
#  tags: android
#  with_items:
#   - linux-lowlatency
#   - linux-headers-lowlatency
##   - linux-realtime
##   - linux-headers-realtime

#TODO add postman
#https://www.getpostman.com/docs/launch

#- name: workstation | Check user
#  user: name={{user}} state=present

#/bin/false

- name: workstation | Force no login for user jboss
  user: name=jboss shell=/bin/bash state=present
  become: yes

- name: workstation | Force no login for user sonar
  user: name=sonar shell=/sbin/nologin state=present
  become: yes

#- name: workstation | Force no login for user vagrant
#  user: name=vagrant shell=/bin/false state=present
#  become: yes

#- name: workstation | Force no login for user zap
#  user: name=zap shell=/bin/false state=present
#  become: yes

- name: workstation | Force no login for user jenkins
  user: name=jenkins shell=/bin/bash state=present
  become: yes
