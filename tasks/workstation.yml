---
# This playbook contains common plays that will be run on all nodes.

#- name: Install enhanced vim with command-t plugin
#  yum: name={{item}} state=present
#  with_items:
#    - vim-enhanced
#    - vim-command-t
#
#- name: Clone dotvim repo
#  git: dest={{home}}/.vim repo=git@github.com:sheldonh/dotvim.git update=no
#
#- name: Link dotvim config to vimrc
#  file: path={{home}}/.vimrc src={{home}}/.vim/vimrc state=link

- name: workstation | Install editor tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags: package
  with_items:
   - apt-show-versions
   - vim
   - geany
   - gedit
   - gedit-plugins
   - tree
#midnight commander
#   - mc

- name: workstation | Install utilities tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags: package
  with_items:
   - meld
   - dos2unix
# xclip -selection clipboard < ~/.ssh/id_rsa.pub
   - xclip
   - manpages-fr
   - manpages-fr-extra
# man with color
   - most

- name: workstation | Install desktop tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags: package
  with_items:
   - nautilus-open-terminal

- name: workstation | Install disk/recovery tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags: package
  with_items:
   - testdisk
   - gparted
   - unetbootin
   - usbmount

- name: workstation | Install extra
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags: package
  with_items:
   - ubuntu-restricted-extras
#   - preload
#lsb_release -a
   - lsb-core

#TODO move git to a role
- name: workstation | Install SCM
  action: yum name={{ item }} state=installed
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  tags: package
  with_items:
   - cvs
   - git
#   - gitg
#   - gitk
#   - mercurial

#TODO create a role for scons
- name: workstation | Install CPP scons build tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' and scons_enabled
  tags: package
  with_items:
   - scons

- name: workstation | Install AWS tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' and aws_enabled
  tags: package
  with_items:
   - ec2-api-tools
   - s3cmd

- name: workstation | Install messaging
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and pidgin_enabled
  tags: package
  with_items:
   - pidgin
   - pidgin-sipe
   - pidgin-skype
#   - teamviewer

- name: workstation | Install VNC
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' and vnc_enabled
  tags: package
  with_items:
   - vnc4server

#Warning might be in conflict with security profile
- name: workstation | Install stats basic tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - finger
    - sysstat
    - net-tools # for netstat
    - rusersd
    - rwhod

- name: workstation | Install performance tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - jmeter
    - optipng
    - pngtools
    - imagemagick

##
 # node.js installation (latest stable instead of Ubuntu's out-of-date one)
 #
- name: nodejs | Package prerequisites for node.js
  action: apt pkg=python-software-properties state=installed
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  tags: nodejs

#- name: add node.js repos
- name: nodejs | Add the node.js PPA
#  action: command add-apt-repository -y ppa:chris-lea/node.js creates=/etc/apt/sources.list.d/custom-node_js-{{ ansible_lsb.codename }}.list
  apt_repository: repo='ppa:chris-lea/node.js' update_cache=yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  tags: nodejs

- name: nodejs | Update the apt cache for the new repository
  action: apt update-cache=yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  tags: nodejs

- name: nodejs | Install nodejs and npm
  action: apt pkg={{ item }} state=installed
  tags: nodejs
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  with_items:
    - nodejs
#WARNING DO NOT INSTALL    - node

- name: karma | Install karma tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  with_items:
   - karma-tools

# NPM may or may not succeed, if you give it time, care, etc. it eventually works

- name: npm | Ensure npm settings
  command: chdir=/usr/bin npm config set prefix /usr/local
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: npm | Ensure npm is properly installed
  command: chdir=/usr/bin npm config get prefix
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: grunt | Ensure the grunt npm dependencies are installed
  command: chdir=/usr/bin npm install -g grunt@0.4.4
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: grunt | Ensure the grunt-cli npm dependencies are installed
  command: chdir=/usr/bin npm install -g grunt-cli@0.1.13
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

#- name: bower | Ensure the bower npm dependencies are installed
#  command: chdir=/usr/bin npm install -g bower@1.3.2
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
#
#- name: protractor | Ensure the protractor npm dependencies are installed
#  command: chdir=/usr/bin npm install -g protractor@0.20.1
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
#
#- debug: msg="ansible_distribution_version value is {{ ansible_distribution_version }} "
#- debug: msg="ansible_distribution_release is {{ ansible_distribution_release }} "
#
#- name: workstation | Ensure the karma npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma@0.12.9
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
##  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' )  and ( ansible_distribution_release != 'precise' )

#Ubuntu 12 ln -s /usr/local/lib/node_modules/karma/bin/karma /usr/local/bin/karma
#- name: workstation | Create karma binaries link (legacy required)
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
#  file: path=/usr/local/bin/karma src=/usr/local/lib/node_modules/karma/bin/karma state=link

#TODO below does not works
#- name: workstation | Update karma rights
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
#  file: path=/usr/local/lib/node_modules mode=0777 owner=root group=root state=directory recurse=yes

#TODO WORKAROUND by hand
#cd /usr/local/bin
#ln -s ../lib/node_modules/karma/bin/karma karma

#cd /usr/local/lib/node_modules
#chown -R nobody:jenkins *

#- name: workstation | Ensure the karma-junit-reporter npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-junit-reporter@0.2.2
#
#- name: workstation | Ensure the karma-ng-scenario npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-ng-scenario@0.1.0
#
#- name: workstation | Ensure the karma-ng-html2js-preprocessor npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-ng-html2js-preprocessor@0.1.0
#
#- name: workstation | Ensure the karma-coverage npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-coverage@0.2.1
#
#- name: workstation | Ensure the karma-jasmine npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-jasmine@0.1.5
#
#- name: workstation | Ensure the jasmine-reporters npm dependencies are installed
#  command: chdir=/usr/bin npm install -g jasmine-reporters@0.4.1
#
#- name: workstation | Ensure the phantomjs npm dependencies are installed
#  command: chdir=/usr/bin npm install -g phantomjs@1.9.2-4
#
#- name: workstation | Ensure the karma-requirejs npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-requirejs@0.2.1
#
##- name: workstation | Ensure the karma-phantomjs-launcher npm dependencies are installed
##  command: chdir=/usr/bin npm install -g karma-phantomjs-launcher@0.1.4
#
#- name: workstation | Ensure the karma-chrome-launcher npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-chrome-launcher@0.1.3
#
#- name: workstation | Ensure the karma-firefox-launcher npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-firefox-launcher@0.1.3
#
#- name: workstation | Ensure the karma-ie-launcher npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-ie-launcher
#
##- name: workstation | Ensure the webdriverjs npm dependencies are installed
##  command: chdir=/usr/bin npm install -g webdriverjs

- name: workstation | Mount | Disable mount points
  mount: >
    name='{{ item }}'
    src='/mnt/dpool{{ item }}'
    fstype=nfs
    state=unmounted
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and mount_enabled
  tags: mount
  with_items:
    - /image
    - /owncloud

#    opts=rw,nodev,nosuid,soft,bg,intr,-r16384,-w16384    
- name: workstation | Mount | Setup mount points
  mount: >
    name='{{ item }}'
    src='/mnt/dpool{{ item }}'
    fstype=nfs
    state=mounted
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and mount_enabled
  tags: mount
  with_items:
    - /media/ftp
    - /media/photo
    - /media/music
    - /media/video
    - /archive
    - /backup

# Mount up device by UUID
#TODO iSCSI
#- name: workstation | Mount | Setup mount points
#  mount:
#    name:/home src='UUID=b3e48f45-f933-4c8e-a700-22a159ec9077'
#    fstype:xfs
#    opts:noatime
#    state:present
#  tags: mount
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and mount_enabled

##
 # Unity package
 #
- name: workstation | Uninstall whoopsie packages
  apt: >
    pkg={{ item }}
    state=absent
    purge=yes
    force=yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
    - whoopsie

##
 # Dash unity lens installation
 # http://doc.ubuntu-fr.org/unity-lens
 #
- name: dash | Uninstall unity-lens and unity-scope packages
  apt: >
    pkg={{ item }}
    state=absent
    purge=yes
    force=yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and dash_enabled
  tags: package
  with_items:
    - unity-scope-video-remote
    - unity-scope-musicstores
    - unity-lens-shopping
    - unity-lens-gwibber
    - unity-lens-askubuntu
    - unity-scope-askubuntu
    - unity-lens-friends
    - unity-lens-video
    - unity-lens-music
    - unity-lens-photos
    
- name: dash | Install unity-lens and unity-scope packages
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and dash_enabled
  tags: package
  with_items:
    - unity-lens-applications
    - unity-lens-files
    - unity-lens-wikipedia
#    - unity-lens-radios
    - unity-lens-vm
    - unity-lens-github
    - unity-scope-gdrive
    - unity-scope-chromiumbookmarks
    - unity-scope-firefoxbookmarks
    - unity-scope-manpages
    - unity-scope-virtualbox

- name: dash | Add dash repo for unity-lens history packages
  apt_repository: repo="ppa:markjtully/ppa" update_cache=yes state={{ workstation_repository_state }}
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: dash_setup

- name: dash | Install unity-lens history packages
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: package
  with_items:
    - unity-web-history-lens
    - zeitgeist-datasource-firefox

#- name: dash | Add dash repo for unity-lens grooveshark packages
#  apt_repository: repo="ppa:scopes-packagers/ppa" update_cache=yes state={{ workstation_repository_state }}
#  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and dash_enabled
#  tags: dash_setup
#
#- name: dash | Install unity-lens grooveshark packages
#  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and dash_enabled
#  tags: package
#  with_items:
#   - unity-scope-grooveshark

- name: dash | Add dash repo for unity-lens google docs packages
  apt_repository: repo="ppa:nilarimogard/webupd8" update_cache=yes state={{ workstation_repository_state }}
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: dash_setup

- name: dash | Install unity-lens google docs packages
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: package
  with_items:
    - unity-lens-gdocs

#sudo add-apt-repository ppa:nilarimogard/webupd8
#sudo apt-get update
#sudo apt-get install unity-lens-gdocs
#gksu gedit /usr/bin/unity-lens-gdocs.py
#unity-lens-gdocs.py
#setsid unity
#
#sudo add-apt-repository ppa:scopes-packagers/ppa
#sudo apt-get update && sudo apt-get install unity-lens-pidgin

- name: dash | Add dash repo for unity-lens pidgin packages
  apt_repository: repo="ppa:scopes-packagers/ppa" update_cache=yes state={{ workstation_repository_state }}
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: dash_setup

- name: dash | Install unity-lens pidgin packages
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: package
  with_items:
    - unity-lens-pidgin

- name: workstation | Add apache elasticsearch vhosts configuration.
  template:
    src: "elasticsearch.conf.j2"
    dest: "{{ apache_conf_path }}/sites-available/elasticsearch.conf"
    owner: root
    group: root
    mode: 0644
#  notify: restart apache
#  when: apache_create_vhosts

- name: workstation | Enable the elasticsearch site
  action: command a2ensite elasticsearch
  ignore_errors: yes
  tags: apache

- name: workstation | Add apache kibana3 vhosts configuration.
  template:
    src: "kibana3.conf.j2"
    dest: "{{ apache_conf_path }}/sites-available/kibana3.conf"
    owner: root
    group: root
    mode: 0644
#  notify: restart apache
#  when: apache_create_vhosts

- name: workstation | Enable the kibana site
  action: command a2ensite kibana3
  ignore_errors: yes
  tags: apache

- name: Check user
  user: name={{ variety_owner }} state=present

- name: Check user home directory
  stat: path={{ variety_owner_home }}
  register: home_present

- debug: msg="Path exists and is a directory"
  when: home_present.stat.isdir is defined and home_present.stat.isdir == true

- name: variety | Create base directory
  file:
    dest="{{ variety_directory }}"
    state=directory
    owner="{{ variety_owner }}"
    group="{{ variety_group }}"
  tags: variety_setup

- name: variety | Add variety configuration.
  template:
    src: "variety.conf.j2"
    dest: "{{ variety_directory }}/variety.conf"
    owner: "{{ variety_owner }}"
    group: "{{ variety_group }}"
    mode: 0644
#  notify: restart variety

- name: dropbox | Create user directory
  file:
    dest="{{ dropbox_user_directory }}"
    state=directory
    owner="{{ dropbox_owner }}"
    group="{{ dropbox_group }}"
  tags: dropbox_setup

- name: dropbox | Create base directory
  file:
    dest="{{ dropbox_directory }}"
    state=directory
    owner="{{ dropbox_owner }}"
    group="{{ dropbox_group }}"
  tags: dropbox_setup

- name: dropbox | Add dropbox configuration.
  template:
    src: "info.json.j2"
    dest: "{{ dropbox_directory }}/info.json"
    owner: "{{ dropbox_owner }}"
    group: "{{ dropbox_group }}"
    mode: 0644
#  notify: restart dropbox

#TODO
#sudo pip install ansigenome
#easy_install ansigenome
#sudo ansigenome config
#cd ~/env/ansible/roles 
#ansigenome scan

#- name: workstation | Check user
#  user: name={{user}} state=present

#/bin/false

- name: workstation | Force no login for user jboss
  user: name=jboss shell=/sbin/nologin state=present

- name: workstation | Force no login for user sonar
  user: name=sonar shell=/sbin/nologin state=present

- name: workstation | Force no login for user vagrant
  user: name=vagrant shell=/sbin/nologin state=present

- name: workstation | Force no login for user zap
  user: name=zap shell=/sbin/nologin state=present

- name: workstation | Force no login for user jenkins
  user: name=jenkins shell=/sbin/nologin state=present
