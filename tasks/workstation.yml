---
# This playbook contains common plays that will be run on all nodes.

- name: workstation | Update the apt cache (in case of issue)
  action: apt update-cache=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')

- name: workstation | Make sure multiverse is enabled for tools
  apt_repository: repo="deb {{ item }} {{ansible_lsb.codename}} universe multiverse" state=present update_cache=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apt_install_multiverse_repositories
  with_items: apt_multiverse_repositories

- name: workstation | Make sure multiverse is enabled for tools
  apt_repository: repo="deb {{ item }} {{ansible_lsb.codename}}-updates universe multiverse" state=present update_cache=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apt_install_multiverse_repositories
  with_items: apt_multiverse_repositories

- name: workstation | Install editor tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - apt-show-versions
   - vim
   - tree
#midnight commander
#   - mc

#- name: workstation | Install editor geany tools
#  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
#  tags: geany
#  with_items:
#   - geany
#   - geany-plugins
##sudo apt-cache search geany

- name: workstation | Install editor gedit tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: gedit
  with_items:
#sudo apt-cache search geany
   - gedit
   - gedit-plugins
   - aspell-fr
   - gconf-editor
#gconf-editor
   - dconf-tools
#dconf-editor

#TODO
#https://codetree.com.au/projects/imitation/
#cd /workspace
#mkdir imitation-1.3
#cd imitation-1.3
#wget https://codetree.com.au/static/content/imitation/releases/imitation-1.3.tar.gz
#tar -xvf imitation-1.3.tar.gz
#cd imitation
#sudo cp ../org.gnome.gedit.plugins.imitation.gschema.xml /usr/share/glib-2.0/schemas/
#sudo glib-compile-schemas /usr/share/glib-2.0/schemas
#cd ..
#sudo cp -r imitation/ /usr/lib/gedit/plugins/
#sudo cp imitation.plugin /usr/lib/gedit/plugins/

- name: workstation | Install editor gedit-gmate tools PPA
  apt_repository: repo='ppa:ubuntu-on-rails/ppa' update_cache=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04','14.04']
  tags: gedit

- name: workstation | Install editor gedit-gmate plugin
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04','14.04']
  tags: gedit
  with_items:
   - gedit-gmate

- name: workstation | Install utilities tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - gnome-terminal
   - meld
   - dos2unix
# xclip -selection clipboard < ~/.ssh/id_rsa.pub
   - xclip
   - rar
   - manpages-fr
   - manpages-fr-extra
# man with color
   - most
# Colorize log tools
   - multitail
   - grc
   - ccze
   - imagemagick
   - stress

- name: workstation | Install eyes tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - redshift
   - redshift-gtk
   - plasma-applet-redshift-control

#info redshift

#- name: workstation | Make sure universe is enabled for eyes applet
#  apt_repository: repo="deb http://cz.archive.ubuntu.com/ubuntu {{ansible_lsb.codename}} main universe" state=present update_cache=yes
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')

- name: workstation | Install eyes applet tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - plasma-applet-redshift-control

#lightdm crash
#- name: synergy | Autostart redshift before logging in (LightDM) | Update client
#  lineinfile:
#    dest=/etc/lightdm/lightdm.conf
#    line="greeter-setup-script=/usr/bin/redshift {{ redshift_options }}"
#    regexp="^greeter-setup-script"
#    state=present
#    insertafter=EOF
#  become: yes
#  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' )

#https://askubuntu.com/questions/598195/how-to-add-a-script-to-startup-applications-from-the-command-line
- name: redshift | Configure startup launcher from command line
  template: src=redshift.desktop.j2 dest={{ home }}/.config/autostart/redshift.desktop mode=0755
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' )
  tags: configure

- name: synergy | Configure startup launcher from command line
  template: src=synergyc.desktop.j2 dest={{ home }}/.config/autostart/synergyc.desktop mode=0755
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' )
  tags: configure

- name: lightdm | Configure lightdm
  template: src=01_nabla.conf.j2 dest=/usr/share/lightdm/lightdm.conf.d/01_nabla.conf mode=0755
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' )
  tags: configure

- name: workstation | Install OCR utilities tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
#https://help.ubuntu.com/community/OCR
   - gocr
   - tesseract-ocr
   - tesseract-ocr-fra
   - tesseract-ocr-nor
#   - gscan2pdf
   - ocrfeeder
   - aspell-fr
   - aspell-en
   - aspell-no
   - hunspell
   - hunspell-fr
#get cpu info
   - clinfo
#http://sourceforge.net/projects/lios/files/latest/download
#lios

- name: workstation | Install PDF utilities tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')  and ansible_distribution_version in ['12.04', '14.04']
  tags: package
  with_items:
   - pdfeditor
   - cups-pdf

- name: workstation | Install CPU utilities tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - ocl-icd-libopencl1
   - ocl-icd-opencl-dev
   - libnuma-dev
#get cpu info
   - clinfo

#http://www.linux.com/learn/tutorials/442456-how-to-scan-and-ocr-like-a-pro-with-open-source-tools
#convert -monochrome politet-17-01-2016.pdf page.tif
#convert -monochrome -density 600 politet-17-01-2016-cleaned.pdf\[1\] page.tif
#tesseract page.tif output -l nor
#ocrfeeder-cli -i page.tif -f TXT -o output.txt -e Tesseract

- name: workstation | Install memory utilities tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - edac-utils
   
#Uninstall nautilus file manager
- name: workstation | Uninstall nautilus file manager
  apt: >
    pkg={{ item }}
    state=absent
    purge=yes
    force=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
#Check for the best file manager at
#https://artfulrobot.uk/blog/whats-best-file-manager-ubuntu-gnome-1404-trusty
#Remove default nautilus file manager
   - nautilus
   - nautilus-sendto
   - nautilus-open-terminal

- name: workstation | Install nemo tools PPA
  apt_repository: repo='ppa:webupd8team/nemo' update_cache=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: nemo

- name: workstation | Install desktop tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: nemo
  with_items:
   - nemo
#Check for the best file manager at
#https://artfulrobot.uk/blog/whats-best-file-manager-ubuntu-gnome-1404-trusty
#Install nemo
#http://www.webupd8.org/2013/10/install-nemo-with-unity-patches-and.html
#TODO
#sudo add-apt-repository ppa:webupd8team/nemo
#sudo apt-get update
#sudo apt-get install nemo nemo-fileroller
#sudo apt-get install nemo-compare nemo-dropbox nemo-media-columns nemo-pastebin nemo-seahorse nemo-share nemo-emblems nemo-image-converter nemo-audio-tab
   - nemo-fileroller
   - nemo-compare
   - nemo-dropbox
   - nemo-media-columns
   - nemo-pastebin
   - nemo-seahorse
   - nemo-share
   - nemo-emblems
   - nemo-image-converter
   - nemo-audio-tab
# rabbitvcs is using too much resources
#   - nemo-rabbitvcs
   - nemo-terminal

#Fix issues with python-nemo
#sudo ln -s /usr/lib/x86_64-linux-gnu/libpython2.7.so.1 /usr/lib/libpython2.7.so.1
#sudo ln -s /usr/lib/libpython2.7.so.1 /usr/lib/libpython2.7.so.1.0
#sudo ln -s /usr/lib/x86_64-linux-gnu/libpython2.7.so.1 /usr/lib/libpython2.7.so.1
#sudo ln -s /usr/lib/libpython2.7.so.1.0 /usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0

#Set Nemo as the default file manager
#gsettings set org.gnome.desktop.background show-desktop-icons false
#xdg-mime default nemo.desktop inode/directory application/x-gnome-saved-search

#restart nemo
#killall nemo
#nemo

- name: workstation | Install desktop tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - software-center

- name: workstation | Install disk/recovery tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - testdisk
   - gparted
   - unetbootin
   - usbmount

- name: workstation | Install extra
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - ubuntu-restricted-extras
#   - preload
#lsb_release -a
   - lsb-core

#http://quehow.com/how-to-add-screensavers-in-ubuntu-14-04/6606.html
#Uninstall default black screensaver
- name: workstation | Uninstall default black screensaver
  apt: >
    pkg={{ item }}
    state=absent
    purge=yes
    force=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and screensaver_enabled
  tags: package
  with_items:
   - gnome-screensaver

- name: workstation | Install screensaver
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and screensaver_enabled
  tags: package
  with_items:
   - xscreensaver
   - xscreensaver-data-extra
   - xscreensaver-gl-extra

#TODO move git to a role
- name: workstation | Install SCM
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and scm_enabled
  tags: package
  with_items:
   - cvs
   - git
#   - gitg
#   - gitk
#   - mercurial

- name: workstation | Install gnuplot tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and scm_enabled
  tags: package
  with_items:
   - gnuplot
   - python-gnuplot

#TODO create a role for scons
- name: workstation | Install CPP scons build tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and scons_enabled
  tags: package
  with_items:
   - scons

- name: workstation | Install Java ant build tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and scons_enabled
  tags: package
  with_items:
   - ant
   - ant-contrib

- name: workstation | Add repo for aws packages
  apt_repository: repo="ppa:awstools-dev/awstools" state={{ util_repository_state|default('present') }} update_cache=yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and (ansible_distribution_version not in ['12.04', '16.04'])
  tags: package
  
- name: workstation | Install AWS tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04']) and aws_enabled
  tags: package
  with_items:
   - ec2-api-tools
   - s3cmd

- name: workstation | Install messaging communication
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and pidgin_enabled
  tags: package
  with_items:
   - pidgin
   - pidgin-sipe
   - pidgin-skype
   - pidgin-otr
   - irssi-plugin-otr
#   - teamviewer
   - recordmydesktop
   - gtk-recordmydesktop
   - apt-transport-https
   - ca-certificates

#TODO install sky
#https://www.tel.red/repos.htm

#sudo sed -i '/https\?:\/\/.*\btel.red\b/d' /etc/apt/sources.list
#sudo apt-get install apt-transport-https ca-certificates
#sudo sh -c 'echo deb https://tel.red/repos/ubuntu xenial non-free \
#    > /etc/apt/sources.list.d/telred.list'
#sudo apt-key adv \
#    --keyserver hkp://keyserver.ubuntu.com:80 \
#    --recv-keys 9454C19A66B920C83DDF696E07C8CCAFCE49F8C5
# sudo apt-get update
# sudo apt-get install sky

- name: workstation | Install VNC
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and vnc_enabled
  tags: package
  with_items:
   - vnc4server

#Warning might be in conflict with security profile
- name: workstation | Install stats basic tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - htop
    - finger
    - sysstat
    - net-tools # for netstat
#    - rusersd
    - rusers
#    - rwho
#    - rwhod
#check ssl
#sslscan --no-failed --ssl3 localhost:443
#    - sslscan
    - curl
    - wget
    - rsync
    - unar
#https://doc.ubuntu-fr.org/httrack
#    - httrack
#    - httraqt
#    - webhttrack
#Spoofing ARP
    - dsniff
    - arpalert
#Pyhton proxy
    - mitmproxy
#WEP WPA cracker
    - aircrack-ng

- name: workstation | Install debug basic tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - strace

#https://doc.ubuntu-fr.org/webcam
#lsusb | grep -i logitech

- name: workstation | Install webcam tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and webcam_enabled
  tags: package
  with_items:
#    - libv4l-0
#    - libv4l-dev
#http://blog.nicolargo.com/2013/05/streaming-depuis-la-raspberry-camera.html
#    - gstreamer-properties
    - guvcview
    - cheese
    - camorama
#    - gphoto2

- name: video | Add repo for gstreamer packages
  apt_repository: repo="ppa:mc3man/trusty-media" state={{ util_repository_state|default('present') }} update_cache=yes
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version in ['14.04'] and gstreamer_enabled
  tags: gstreamer_setup

- name: video | Install gstreamer packages
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04','14.04'] and gstreamer_enabled
  tags: gstreamer_setup
  with_items:
    - gstreamer0.10-ffmpeg

- name: workstation | Install webcam tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04','14.04'] and gstreamer_enabled
  tags: gstreamer_setup
  with_items:
    - gstreamer0.10-plugins-base
    - gstreamer0.10-plugins-good
    - gstreamer0.10-plugins-bad
    - gstreamer0.10-plugins-ugly

- name: workstation | Install webcam tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['16.04'] and gstreamer_enabled
  tags: gstreamer_setup
  with_items:
    - gstreamer1.0-plugins-base
    - gstreamer1.0-plugins-good
    - gstreamer1.0-plugins-bad
    - gstreamer1.0-plugins-ugly

- name: workstation | Install security basic tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - tcpdump
    - testdisk
#    - photorec
    - chkrootkit
#sudo chkrootkit
    - rkhunter
#sudo rkhunter --check --rwo --pkgmgr dpkg
#update your system
#sudo rkhunter --propupd
    - tiger
#TODO    - burp
#TODO    - mig
#See https://tools.pentestbox.com/ on windows
#https://github.com/stasinopoulos/commix
#see : https://blog.anantshri.info/ironwasp-on-linux/
#wget https://blog.anantshri.info/content/uploads/2013/01/ironwasp_installer.sh.txt -O ~/ironwasp_installer.sh && sh ~/ironwasp_installer.sh
#see https://github.com/0xsauby/yasuo
#sudo gem install ruby-nmap net-http-persistent mechanize text-table

#TODO
#http://www.iss.net/security_center/advice/Services/SunRPC/rpc.rusersd/default.htm

- name: workstation | Install antivirus tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - clamav
    - clamav-daemon
    - clamtk

#sudo freshclam
#clamscan -r --bell -i /
#Schedule a scan tommorrow
#at 3:30 tomorrow
#clamscan -i / | mail alban.andrieu@free.fr
#<CTRL-D>

#https://askubuntu.com/questions/645097/installing-sophos-anti-virus

- name: workstation | Install network tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - gnome-nettool
    - gnome-system-tools
#TODO create a role
#    - wireshark
    - nmap
    - zenmap
    - dnsutils #nslookup
#TODO install fing
#http://www.overlooksoft.com/getfing4linux?plat=lx64&ext=deb
#sudo fing
#TODO install angryip
#http://angryip.org/about/
#http://quehow.com/how-to-monitor-your-network-traffic-in-ubuntu-14-04/6904.html
#sudo apt-get install knemo

#- name: workstation | Install utilities tools
#  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
#  tags: package
#  with_items:
#    - linux-disk-cleaner

- name: workstation | Install performance tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
#    - jmeter
    - optipng
    - pngtools
    - imagemagick
#sudo nethogs eth1
    - nethogs

- name: workstation | Install vpn tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - network-manager-openconnect

##
 # node.js installation (latest stable instead of Ubuntu's out-of-date one)
 #
- name: nodejs | Package prerequisites for node.js
  action: apt pkg=python-software-properties state=installed
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  tags: nodejs

#- name: add node.js repos
- name: nodejs | Add the node.js PPA
#  action: command add-apt-repository -y ppa:chris-lea/node.js creates=/etc/apt/sources.list.d/custom-node_js-{{ ansible_lsb.codename }}.list
  apt_repository: repo='ppa:chris-lea/node.js' update_cache=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  tags: nodejs

- name: nodejs | Install nodejs and npm
  action: apt pkg={{ item }} state=installed
  become: yes
  tags: nodejs
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  with_items:
    - nodejs
#WARNING DO NOT INSTALL    - node

- name: karma | Install karma tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  with_items:
   - karma-tools

# NPM may or may not succeed, if you give it time, care, etc. it eventually works

- name: npm | Ensure npm settings
  command: chdir=/usr/bin npm config set prefix /usr/local
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: npm | Ensure npm is properly installed
  command: chdir=/usr/bin npm config get prefix
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: grunt | Ensure the grunt npm dependencies are installed
  npm: >
    name={{ item }}
    state=present
    global=yes
    version={{ grunt_version }}
  with_items:
    - grunt
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: grunt | Ensure the grunt-cli npm dependencies are installed
  npm: >
    name={{ item }}
    state=present
    global=yes
    version={{ grunt_cli_version }}
  with_items:
    - grunt-cli
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

#- name: bower | Ensure the bower npm dependencies are installed
#  command: chdir=/usr/bin npm install -g bower@1.3.2
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: bower | Ensure the bower npm dependencies are installed
  npm: >
    name={{ item }}
    state=present
    global=yes
    version={{ bower_version }}
  with_items:
    - bower
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: bower | Clean cache
  command: bower cache clean
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled and bower_clean_cache_enabled

#- name: bower | Ensure the other npm dependencies are installed
#  npm: >
#    name={{ item }}
#    state=present
#    global=yes
#  with_items:
#    - phantomjs
#    - yslow
#    - psi
#    - webpagetest
#    - phantomas
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

#- name: protractor | Ensure the protractor npm dependencies are installed
#  command: chdir=/usr/bin npm install -g protractor@0.20.1
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
#
#- debug: msg="ansible_distribution_version value is {{ ansible_distribution_version }} "
#- debug: msg="ansible_distribution_release is {{ ansible_distribution_release }} "
#
#- name: workstation | Ensure the karma npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma@0.12.9
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
##  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' )  and ( ansible_distribution_release != 'precise' )

#Ubuntu 12 ln -s /usr/local/lib/node_modules/karma/bin/karma /usr/local/bin/karma
#- name: workstation | Create karma binaries link (legacy required)
#  file: path=/usr/local/bin/karma src=/usr/local/lib/node_modules/karma/bin/karma state=link
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')

#TODO below does not works
#- name: workstation | Update karma rights
#  file: path=/usr/local/lib/node_modules mode=0777 owner=root group=root state=directory recurse=yes
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')

#TODO WORKAROUND by hand
#cd /usr/local/bin
#ln -s ../lib/node_modules/karma/bin/karma karma

#cd /usr/local/lib/node_modules
#chown -R nobody:jenkins *

#- name: workstation | Ensure the karma-junit-reporter npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-junit-reporter@0.2.2
#  become: yes
#
#- name: workstation | Ensure the karma-ng-scenario npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-ng-scenario@0.1.0
#  become: yes
#
#- name: workstation | Ensure the karma-ng-html2js-preprocessor npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-ng-html2js-preprocessor@0.1.0
#  become: yes
#
#- name: workstation | Ensure the karma-coverage npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-coverage@0.2.1
#  become: yes
#
#- name: workstation | Ensure the karma-jasmine npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-jasmine@0.1.5
#  become: yes
#
#- name: workstation | Ensure the jasmine-reporters npm dependencies are installed
#  command: chdir=/usr/bin npm install -g jasmine-reporters@0.4.1
#  become: yes
#
#- name: workstation | Ensure the phantomjs npm dependencies are installed
#  command: chdir=/usr/bin npm install -g phantomjs@1.9.2-4
#  become: yes
#
#- name: workstation | Ensure the karma-requirejs npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-requirejs@0.2.1
#  become: yes
#
##- name: workstation | Ensure the karma-phantomjs-launcher npm dependencies are installed
##  command: chdir=/usr/bin npm install -g karma-phantomjs-launcher@0.1.4
##  become: yes
#
#- name: workstation | Ensure the karma-chrome-launcher npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-chrome-launcher@0.1.3
#  become: yes
#
#- name: workstation | Ensure the karma-firefox-launcher npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-firefox-launcher@0.1.3
#  become: yes
#
#- name: workstation | Ensure the karma-ie-launcher npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-ie-launcher
#  become: yes
#
##- name: workstation | Ensure the webdriverjs npm dependencies are installed
##  command: chdir=/usr/bin npm install -g webdriverjs
##  become: yes

##
 # Coffee script
 #
#description: Install "coffee-script" node.js package.
#- npm: name=coffee-script path=/app/location
#
#description: Install "coffee-script" node.js package on version 1.6.1.
#- npm: name=coffee-script version=1.6.1 path=/app/location
#
#description: Install "coffee-script" node.js package globally.
#- npm: name=coffee-script global=yes
#
#description: Remove the globally package "coffee-script".
#- npm: name=coffee-script global=yes state=absent
#
#description: Install packages based on package.json.
#- npm: path=/app/location
#
#description: Update packages based on package.json to their latest version.
#- npm: path=/app/location state=latest
#
#description: Install packages based on package.json using the npm installed with nvm v0.10.1.
#- npm: path=/app/location executable=/opt/nvm/v0.10.1/bin/npm state=present

- name: workstation | Mount | Disable mount points
  mount: >
    name='{{ item }}'
    src='/mnt/dpool{{ item }}'
    fstype=nfs
    state=unmounted
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and mount_enabled
  tags: mount
  with_items:
    - /image
    - /owncloud

#    opts=rw,nodev,nosuid,soft,bg,intr,-r16384,-w16384
- name: workstation | Mount | Setup mount points
  mount: >
    name='{{ item }}'
    src='/mnt/dpool{{ item }}'
    fstype=nfs
    state=mounted
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and mount_enabled
  tags: mount
  with_items:
    - /media/ftp
    - /media/photo
    - /media/music
    - /media/video
    - /archive
    - /backup

# Mount up device by UUID
#TODO iSCSI
#- name: workstation | Mount | Setup mount points
#  mount:
#    name:/home src='UUID=b3e48f45-f933-4c8e-a700-22a159ec9077'
#    fstype:xfs
#    opts:noatime
#    state:present
#  become: yes
#  tags: mount
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and mount_enabled

##
 # Unity package
 #
- name: workstation | Uninstall whoopsie packages
  apt: >
    pkg={{ item }}
    state=absent
    purge=yes
    force=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
    - whoopsie

- name: workstation | Uninstall unused applications
  apt: >
    pkg={{ item }}
    state=absent
    purge=yes
    force=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
    - modemmanager
    - thunderbird

- name: keepass2 | Add keepass2 repo
  apt_repository: repo="ppa:jtaylor/keepass" update_cache=yes state={{ util_repository_state|default('present') }}
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and keepass2_enabled
  tags: keepass2_setup

- name: keepass2 | Install keepass2 packages
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and keepass2_enabled
  tags: keepass2_setup
  with_items:
    - keepass2

##
 # Dash unity lens installation
 # http://doc.ubuntu-fr.org/unity-lens
 #
- name: dash | Uninstall unity-lens and unity-scope packages
  apt: >
    pkg={{ item }}
    state=absent
    purge=yes
    force=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and dash_enabled
  tags: dash_setup
  with_items:
    - unity-scope-video-remote
    - unity-scope-musicstores
    - unity-lens-shopping
    - unity-lens-gwibber
    - unity-lens-askubuntu
    - unity-scope-askubuntu
    - unity-lens-friends
    - unity-lens-video
    - unity-lens-music
    - unity-lens-photos

- name: dash | Install unity-lens and unity-scope packages
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and dash_enabled
  tags: dash_setup
  with_items:
    - unity-lens-applications
    - unity-lens-files
#    - unity-lens-wikipedia
#    - unity-lens-radios
#    - unity-lens-vm
#    - unity-lens-github
    - unity-scope-gdrive
    - unity-scope-chromiumbookmarks
    - unity-scope-firefoxbookmarks
    - unity-scope-manpages
    - unity-scope-virtualbox

#http://linuxfr.org/news/integration-des-web-apps-dont-linuxfr-org-dans-unity
- name: webapps | Add webapps repo for unity-webapps-preview packages
  apt_repository: repo="ppa:webapps/preview" state={{ util_repository_state|default('present') }} update_cache=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version in ['12.04'] and webapps_enabled
  tags: webapps_setup

- name: webapps | Install unity-webapps-preview packages
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04'] and webapps_enabled
  tags: webapps_setup
  with_items:
    - unity-webapps-preview
    - unity-webapps-common
    - unity-chromium-extension
    - unity-webapps-googlecalendar
    - unity-webapps-gmail
    - unity-webapps-googledocs
    - unity-webapps-googleplus
    - unity-webapps-twitter
    - unity-webapps-facebookmessenger
    - xul-ext-unity

- name: dash | Add dash repo for unity-lens history packages
  apt_repository: repo="ppa:markjtully/ppa" state={{ util_repository_state|default('present') }} update_cache=yes
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: dash_setup

- name: dash | Install unity-lens history packages
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: dash_setup
  with_items:
    - unity-web-history-lens
    - zeitgeist-datasource-firefox

#- name: dash | Add dash repo for unity-lens grooveshark packages
#  apt_repository: repo="ppa:scopes-packagers/ppa" state={{ util_repository_state|default('present') }} update_cache=yes
#  become: yes
#  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and dash_enabled
#  tags: dash_setup
#
#- name: dash | Install unity-lens grooveshark packages
#  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
#  become: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and dash_enabled
#  tags: dash_setup
#  with_items:
#   - unity-scope-grooveshark

- name: dash | Add dash repo for unity-lens google docs packages
  apt_repository: repo="ppa:nilarimogard/webupd8" state={{ util_repository_state|default('present') }} update_cache=yes
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: dash_setup

- name: dash | Install unity-lens google docs packages
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: dash_setup
  with_items:
    - unity-lens-gdocs

#sudo add-apt-repository ppa:nilarimogard/webupd8
#sudo apt-get update
#sudo apt-get install unity-lens-gdocs
#gksu gedit /usr/bin/unity-lens-gdocs.py
#unity-lens-gdocs.py
#setsid unity
#
#sudo add-apt-repository ppa:scopes-packagers/ppa
#sudo apt-get update && sudo apt-get install unity-lens-pidgin

- name: dash | Add dash repo for unity-lens pidgin packages
  apt_repository: repo="ppa:scopes-packagers/ppa" state={{ util_repository_state|default('present') }} update_cache=yes
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: dash_setup

- name: dash | Install unity-lens pidgin packages
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: dash_setup
  with_items:
    - unity-lens-pidgin

#http://www.florian-diesch.de/software/classicmenu-indicator/
- name: indicator classicmenu | Add dash repo for classicmenu-indicator packages
  apt_repository: repo="ppa:diesch/testing" state={{ util_repository_state|default('present') }} update_cache=yes
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version in ['12.04'] and classicmenu_indicator_enabled
  tags: classicmenu_indicator_setup

- name: indicator classicmenu | Install classicmenu-indicator pidgin packages
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and classicmenu_indicator_enabled
  tags: classicmenu_indicator_setup
  with_items:
    - classicmenu-indicator

#########################
#TODO
#Ubuntu 14.04
- name: indicator calendar | Add repo for calendar-indicator packages
  apt_repository: repo="ppa:atareao/atareao" state={{ util_repository_state|default('present') }} update_cache=yes
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version not in ['12.04'] and calendar_indicator_enabled
  tags: calendar_indicator_setup

- name: indicator calendar | Install calendar-indicator packages
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and calendar_indicator_enabled
  tags: calendar_indicator_setup
  with_items:
    - calendar-indicator

- name: indicator pidgin | Add repo for pidgin-indicator packages
  apt_repository: repo="ppa:nilarimogard/webupd8" state={{ util_repository_state|default('present') }} update_cache=yes
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version not in ['12.04'] and pidgin_indicator_enabled
  tags: pidgin_indicator_setup

- name: indicator pidgin | Install pidgin-indicator packages
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and pidgin_indicator_enabled
  tags: pidgin_indicator_setup
  with_items:
    - pidgin-indicator

- name: indicator weather | Add repo for my-weather-indicator packages
  apt_repository: repo="ppa:atareao/atareao" state={{ util_repository_state|default('present') }} update_cache=yes
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version not in ['12.04'] and weather_indicator_enabled
  tags: weather_indicator_setup

- name: indicator weather | Install my-weather-indicator packages
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and weather_indicator_enabled
  tags: weather_indicator_setup
  with_items:
    - my-weather-indicator

#sudo apt-get install indicator-cpufreq
#
- name: indicator cpufreq | Install cpufreq-indicator packages
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and cpufreq_indicator_enabled
  tags: cpufreq_indicator_setup
  with_items:
    - indicator-cpufreq

#sudo apt-get install unity-tweak-tool

- name: unity-tweak-tool | Install unity-tweak-tool packages
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and tweak_enabled
  tags: tweak_setup
  with_items:
    - unity-tweak-tool

##http://digital-era.net/10-things-to-do-after-installing-ubuntu-14-04-trusty-tahr-to-get-a-near-perfect-desktop/
#gsettings set com.canonical.Unity.Lenses disabled-scopes "['more_suggestions-amazon.scope', 'more_suggestions-u1ms.scope', 'more_suggestions-populartracks.scope', 'music-musicstore.scope', 'more_suggestions-ebay.scope', 'more_suggestions-ubuntushop.scope', 'more_suggestions-skimlinks.scope']"
#
#sudo apt-get install compizconfig-settings-manager
#
- name: compizconfig-settings-manager | Install compizconfig-settings-manager packages
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and compizconfig_enabled
  tags: compizconfig_setup
  with_items:
    - compizconfig-settings-manager

- name: skype | Install skype fixes
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and skype_enabled
  tags: skype_setup
  with_items:
    - gtk2-engines-murrine:i386
    - gtk2-engines-pixbuf:i386
    - sni-qt:i386
#
##sudo apt-add-repository ppa:pipelight/stable
##sudo apt-get update
##sudo apt-get install pipelight-multi
##sudo pipelight-plugin --enable silverlight
##sudo pipelight-plugin --enable widevine
#
#sudo apt-get install pepperflashplugin-nonfree
#sudo update-pepperflashplugin-nonfree --install
#
##gsettings set org.gnome.nautilus.preferences enable-interactive-search false
##gsettings set org.gnome.nautilus.preferences enable-interactive-search true
#
#sudo add-apt-repository ppa:linrunner/tlp
#sudo apt-get update
#sudo apt-get remove laptop-mode-tools
#sudo apt-get install tlp tlp-rdwsudo tlp start
#
#sudo apt-get install ubuntu-restricted-extras
#sudo apt-get install libavcodec-extra
#sudo apt-get install libdvdread4sudo /usr/share/doc/libdvdread4/install-css.sh
#
#sudo add-apt-repository ppa:alessandro-strada/ppa
#sudo apt-get update
#sudo apt-get install google-drive-ocamlfuse
#google-drive-ocamlfuse
#mkdir ~/gdrive
#google-drive-ocamlfuse ~/gdrive
#
#sudo add-apt-repository ppa:danjaredg/jayatana
#sudo apt-get update
#sudo apt-get install jayatana

- name: batteries | Add repo for tlp packages (Improve battery life and reduce overheating)
  apt_repository: repo="ppa:linrunner/tlp" state={{ util_repository_state|default('present') }} update_cache=yes
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version not in ['12.04'] and tlp_enabled
  tags: weather_indicator_setup

- name: batteries | Install tlp packages (Improve battery life and reduce overheating)
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and tlp_enabled
  tags: weather_indicator_setup
  with_items:
    - tlp
    - tlp-rdw

#TODO sudo tlp start

#########################

#TODO for tomcat7 to work on eclipse
##cd ~/workspace/.metadata/.plugins/org.eclipse.core.runtime/.settings/
##rm org.eclipse.jst.server.tomcat.core.prefs
##rm org.eclipse.wst.server.core.prefs

#cd /usr/share/tomcat7
#sudo service tomcat7 stop
#sudo update-rc.d tomcat7 disable
#sudo ln -s /var/lib/tomcat7/conf conf
#sudo ln -s /etc/tomcat7/policy.d/03catalina.policy conf/catalina.policy
#sudo ln -s /var/log/tomcat7 log
#sudo chmod -R 777 /usr/share/tomcat7/conf
#sudo ln -s /var/lib/tomcat7/common common
#sudo ln -s /var/lib/tomcat7/server server
#sudo ln -s /var/lib/tomcat7/shared shared

- name: workstation | Add apache jenkins vhosts configuration.
  template:
    src: "apache-jenkins.conf.j2"
    dest: "{{ apache_conf_path }}/sites-available/jenkins.conf"
    owner: root
    group: root
    mode: 0644
  become: yes
#  notify: restart apache
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apache_create_vhosts

- name: workstation | Enable the jenkins site
  action: command a2ensite jenkins
  become: yes
  ignore_errors: yes
  tags: apache
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apache_create_vhosts

- name: workstation | Add apache nabla vhosts configuration.
  template:
    src: "apache-nabla.conf.j2"
    dest: "{{ apache_conf_path }}/sites-available/nabla.conf"
    owner: root
    group: root
    mode: 0644
  become: yes
#  notify: restart apache
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apache_create_vhosts

- name: workstation | Enable the nabla site
  action: command a2ensite nabla
  become: yes
  ignore_errors: yes
  tags: apache
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apache_create_vhosts

- name: workstation | Add apache awx ansible tower vhosts configuration.
  template:
    src: "apache-awx-httpd-7077.conf.j2"
    dest: "{{ apache_conf_path }}/sites-available/awx-httpd-7077.conf"
    owner: root
    group: root
    mode: 0644
  become: yes
#  notify: restart apache
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apache_create_vhosts

- name: workstation | Enable the awx ansible tower site
  action: command a2ensite awx-httpd-7077
  become: yes
  ignore_errors: yes
  tags: apache
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apache_create_vhosts

- name: workstation | Enable the apache mod headers
  action: command a2enmod headers
  become: yes
  ignore_errors: yes
  tags: apache
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apache_create_vhosts

#Fix security issue :
#X-Content-Type-Options: nosniff
#WARNING this is a whole file overwrite
- name: workstation | Add apache main configuration (ports.conf).
  template:
    src: "ports.conf.j2"
    dest: "{{ apache_conf_path }}/ports.conf"
    owner: root
    group: root
    mode: 0644
  become: yes
#  notify: restart apache
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apache_create_vhosts

- name: Check user
  user: name={{ variety_owner }} state=present

- name: Check user home directory
  stat: path={{ variety_owner_home }}
  register: home_present

- debug: msg="Path exists and is a directory"
  when: home_present.stat.isdir is defined and home_present.stat.isdir == true

- name: variety | Create base directory
  file:
    dest="{{ variety_directory }}"
    state=directory
    owner="{{ variety_owner }}"
    group="{{ variety_group }}"
  ignore_errors: true
#  sudo_user: "{{ variety_owner }}"
  tags: variety_setup

- name: variety | Add variety configuration.
  template:
    src: "variety.conf.j2"
    dest: "{{ variety_directory }}/variety.conf"
    owner: "{{ variety_owner }}"
    group: "{{ variety_group }}"
    mode: 0644
#  notify: restart variety

- name: dropbox | Create user directory
  file:
    dest="{{ dropbox_user_directory }}"
    state=directory
    owner="{{ dropbox_owner }}"
    group="{{ dropbox_group }}"
  ignore_errors: true
  tags: dropbox_setup

- name: dropbox | Create base directory
  file:
    dest="{{ dropbox_directory }}"
    state=directory
    owner="{{ dropbox_owner }}"
    group="{{ dropbox_group }}"
  ignore_errors: true
  tags: dropbox_setup

- name: dropbox | Add dropbox configuration.
  template:
    src: "info.json.j2"
    dest: "{{ dropbox_directory }}/info.json"
    owner: "{{ dropbox_owner }}"
    group: "{{ dropbox_group }}"
    mode: 0644
#  notify: restart dropbox

- name: python | Install pip python package
  apt:
    pkg: "{{ item }}"
    state: latest
    update_cache: yes
    cache_valid_time: 600
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and python_enabled
  with_items:
    - python-dev
    - python-pip

- name: python | Install python utilities tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04']) and python_enabled
  tags: package
  with_items:
#flake8 .
   - python-flake8
   - python-netaddr

- name: python | Install Ansible documentation generator prerequisite
  pip: name={{ item }} executable=pip2
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and python_enabled and ansigenome_enabled
  with_items:
    - paramiko
    - PyYAML
    - jinja2
    - httplib2

- name: python | Install Ansible documentation generator
  pip: name={{ item }} executable=pip2
#  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and python_enabled and ansigenome_enabled
  with_items:
    - setuptools
    - ansigenome

- name: python | Install Ansible check
  pip: name={{ item }} executable=pip2
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and python_enabled and ansigenome_enabled
  with_items:
    - ansible-lint

#TODO
#sudo pip install ansigenome
#easy_install ansigenome
#sudo ansigenome config
#cd ~/env/ansible/roles
#ansigenome scan

- name: workstation | Add repo for plank packages
  apt_repository: repo="ppa:ricotz/docky" state={{ util_repository_state|default('present') }} update_cache=yes
  become: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and (ansible_distribution_version not in ['12.04']) and plank_enabled
  tags: plank

- name: workstation | Install plank
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04']) and plank_enabled
  tags: plank
  with_items:
   - plank

- name: workstation | Install android sdk
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04']) and android_enabled
  tags: android
  with_items:
#   - gnome-phone-manager
   - android-tools-adb
   - android-tools-fastboot

#TODO docker
#sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual

- name: workstation | Install docker requirement
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04'])
  tags: android
  with_items:
   - apparmor-utils

#See https://help.ubuntu.com/community/UbuntuStudioPreparation
- name: workstation | Install Ubuntu studio requirement
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04'])
  tags: android
  with_items:
   - vlc 
   - ubuntu-restricted-extras 
   - ubuntustudio-menu 
   - cdrdao

- name: workstation | Install gimp requirement
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04'])
  tags: android
  with_items:
   - gimp 
   - gimp-data-extras 
   - gimp-lensfun 
   - gimp-texturize 
   - create-resources 
   - inkscape 
   - ink-generator
#   - darktable
 
- name: workstation | Install  font requirement
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04'])
  tags: android
  with_items:
   - fontforge 
   - fontforge-extras
   
- name: workstation | Install wine requirement
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04'])
  tags: android
  with_items:
   - wine  

- name: workstation | Install lowlatency kernel
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }} update_cache=yes"
  become: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04'])
  tags: android
  with_items:
   - linux-lowlatency 
   - linux-headers-lowlatency
#   - linux-realtime 
#   - linux-headers-realtime
        
#TODO add postman
#https://www.getpostman.com/docs/launch

#- name: workstation | Check user
#  user: name={{user}} state=present

#/bin/false

- name: workstation | Force no login for user jboss
  user: name=jboss shell=/bin/bash state=present
  become: yes

- name: workstation | Force no login for user sonar
  user: name=sonar shell=/sbin/nologin state=present
  become: yes

#- name: workstation | Force no login for user vagrant
#  user: name=vagrant shell=/bin/false state=present
#  become: yes

#- name: workstation | Force no login for user zap
#  user: name=zap shell=/bin/false state=present
#  become: yes

- name: workstation | Force no login for user jenkins
  user: name=jenkins shell=/bin/bash state=present
  become: yes
