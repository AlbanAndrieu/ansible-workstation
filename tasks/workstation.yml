---
# This playbook contains common plays that will be run on all nodes.

- name: workstation | Make sure multiverse is enabled for tools
  apt_repository: repo="deb {{ item }} {{ansible_lsb.codename}} universe multiverse" state=present update_cache=yes
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apt_install_multiverse_repositories
  with_items: apt_multiverse_repositories

- name: workstation | Make sure multiverse is enabled for tools
  apt_repository: repo="deb {{ item }} {{ansible_lsb.codename}}-updates universe multiverse" state=present update_cache=yes
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apt_install_multiverse_repositories
  with_items: apt_multiverse_repositories

- name: workstation | Install editor tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - apt-show-versions
   - vim
   - tree
#midnight commander
#   - mc

#- name: workstation | Install editor geany tools
#  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
#  sudo: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
#  tags: geany
#  with_items:
#   - geany
#   - geany-plugins
##sudo apt-cache search geany

- name: workstation | Install editor gedit tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: gedit
  with_items:
#sudo apt-cache search geany
   - gedit
   - gedit-plugins
   - aspell-fr
   - gconf-editor
#gconf-editor
   - dconf-tools
#dconf-editor

#TODO
#https://codetree.com.au/projects/imitation/
#cd /workspace
#mkdir imitation-1.3
#cd imitation-1.3
#wget https://codetree.com.au/static/content/imitation/releases/imitation-1.3.tar.gz
#tar -xvf imitation-1.3.tar.gz
#cd imitation
#sudo cp ../org.gnome.gedit.plugins.imitation.gschema.xml /usr/share/glib-2.0/schemas/
#sudo glib-compile-schemas /usr/share/glib-2.0/schemas
#cd ..
#sudo cp -r imitation/ /usr/lib/gedit/plugins/
#sudo cp imitation.plugin /usr/lib/gedit/plugins/

- name: workstation | Install editor gedit-gmate tools PPA
  apt_repository: repo='ppa:ubuntu-on-rails/ppa' update_cache=yes
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: gedit

- name: workstation | Update the apt cache for the new repository
  action: apt update-cache=yes
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: gedit

- name: workstation | Install editor gedit-gmate plugin
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: gedit
  with_items:
   - gedit-gmate

- name: workstation | Install utilities tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - meld
   - dos2unix
# xclip -selection clipboard < ~/.ssh/id_rsa.pub
   - xclip
   - manpages-fr
   - manpages-fr-extra
# man with color
   - most
# Colorize log tools
   - multitail
   - grc
   - ccze

- name: workstation | Install desktop tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - nautilus-open-terminal

- name: workstation | Install disk/recovery tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - testdisk
   - gparted
   - unetbootin
   - usbmount

- name: workstation | Install extra
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
   - ubuntu-restricted-extras
#   - preload
#lsb_release -a
   - lsb-core

#TODO move git to a role
- name: workstation | Install SCM
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and scm_enabled
  tags: package
  with_items:
   - cvs
   - git
#   - gitg
#   - gitk
#   - mercurial

#TODO move git to a role
- name: workstation | Install SCM
  action: yum name={{ item }} state=installed
  sudo: yes
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux') and scm_enabled
  tags: package
  with_items:
   - cvs
   - git
#   - gitg
#   - gitk
#   - mercurial

#TODO create a role for scons
- name: workstation | Install CPP scons build tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and scons_enabled
  tags: package
  with_items:
   - scons

- name: workstation | Install Java ant build tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and scons_enabled
  tags: package
  with_items:
   - ant
   - ant-contrib

- name: workstation | Install AWS tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and aws_enabled
  tags: package
  with_items:
   - ec2-api-tools
   - s3cmd

- name: workstation | Install messaging communication
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and pidgin_enabled
  tags: package
  with_items:
   - pidgin
   - pidgin-sipe
   - pidgin-skype
#   - teamviewer
   - recordmydesktop
   - gtk-recordmydesktop

- name: workstation | Install VNC
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and vnc_enabled
  tags: package
  with_items:
   - vnc4server

#has been moved to his own role
#- name: workstation | Install Synergy
#  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
#  sudo: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and synergy_enabled
#  tags: package
#  with_items:
#   - synergy

#Warning might be in conflict with security profile
- name: workstation | Install stats basic tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - finger
    - sysstat
    - net-tools # for netstat
#    - rusersd
    - rusers
#    - rwho
#    - rwhod

- name: workstation | Install security basic tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - testdisk
#    - photorec
    - chkrootkit
#sudo chkrootkit
    - rkhunter
#sudo rkhunter --check --rwo --pkgmgr dpkg
#update your system
#sudo rkhunter --propupd
    - tiger
#TODO    - burp
#TODO    - mig
#See https://tools.pentestbox.com/ on windows
#https://github.com/stasinopoulos/commix
#see : https://blog.anantshri.info/ironwasp-on-linux/
#wget https://blog.anantshri.info/content/uploads/2013/01/ironwasp_installer.sh.txt -O ~/ironwasp_installer.sh && sh ~/ironwasp_installer.sh
#see https://github.com/0xsauby/yasuo
#sudo gem install ruby-nmap net-http-persistent mechanize text-table

#TODO
#http://www.iss.net/security_center/advice/Services/SunRPC/rpc.rusersd/default.htm

- name: workstation | Install antivirus tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - clamav
    - clamav-daemon
    - clamtk

#sudo freshclam
#clamscan -r --bell -i /
#Schedule a scan tommorrow
#at 3:30 tomorrow
#clamscan -i / | mail alban.andrieu@free.fr
#<CTRL-D>

- name: workstation | Install network tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
    - gnome-nettool
    - gnome-system-tools
#TODO create a role
#    - wireshark
    - zenmap
#TODO install fing
#http://www.overlooksoft.com/getfing4linux?plat=lx64&ext=deb
#sudo fing
#TODO install angryip
#http://angryip.org/about/

#- name: workstation | Install utilities tools
#  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
#  sudo: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
#  tags: package
#  with_items:
#    - linux-disk-cleaner

- name: workstation | Install performance tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and stats_enabled
  tags: package
  with_items:
#    - jmeter
    - optipng
    - pngtools
    - imagemagick
#sudo nethogs eth1
    - nethogs

##
 # node.js installation (latest stable instead of Ubuntu's out-of-date one)
 #
- name: nodejs | Package prerequisites for node.js
  action: apt pkg=python-software-properties state=installed
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  tags: nodejs

#- name: add node.js repos
- name: nodejs | Add the node.js PPA
#  action: command add-apt-repository -y ppa:chris-lea/node.js creates=/etc/apt/sources.list.d/custom-node_js-{{ ansible_lsb.codename }}.list
  apt_repository: repo='ppa:chris-lea/node.js' update_cache=yes
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  tags: nodejs

- name: nodejs | Update the apt cache for the new repository
  action: apt update-cache=yes
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  tags: nodejs

- name: nodejs | Install nodejs and npm
  action: apt pkg={{ item }} state=installed
  sudo: yes
  tags: nodejs
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  with_items:
    - nodejs
#WARNING DO NOT INSTALL    - node

- name: karma | Install karma tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
  with_items:
   - karma-tools

# NPM may or may not succeed, if you give it time, care, etc. it eventually works

- name: npm | Ensure npm settings
  command: chdir=/usr/bin npm config set prefix /usr/local
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: npm | Ensure npm is properly installed
  command: chdir=/usr/bin npm config get prefix
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: grunt | Ensure the grunt npm dependencies are installed
  npm: >
    name={{ item }}
    state=present
    global=yes
    version={{ grunt_version }}
  with_items:
    - grunt
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: grunt | Ensure the grunt-cli npm dependencies are installed
  npm: >
    name={{ item }}
    state=present
    global=yes
    version={{ grunt_cli_version }}
  with_items:
    - grunt-cli
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

#- name: bower | Ensure the bower npm dependencies are installed
#  command: chdir=/usr/bin npm install -g bower@1.3.2
#  sudo: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: bower | Ensure the bower npm dependencies are installed
  npm: >
    name={{ item }}
    state=present
    global=yes
    version={{ bower_version }}
  with_items:
    - bower
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

- name: bower | Clean cache
  command: bower cache clean
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled and bower_clean_cache_enabled

#- name: bower | Ensure the other npm dependencies are installed
#  npm: >
#    name={{ item }}
#    state=present
#    global=yes
#  with_items:
#    - phantomjs
#    - yslow
#    - psi
#    - webpagetest
#    - phantomas
#  sudo: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled

#- name: protractor | Ensure the protractor npm dependencies are installed
#  command: chdir=/usr/bin npm install -g protractor@0.20.1
#  sudo: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and nodejs_enabled
#
#- debug: msg="ansible_distribution_version value is {{ ansible_distribution_version }} "
#- debug: msg="ansible_distribution_release is {{ ansible_distribution_release }} "
#
#- name: workstation | Ensure the karma npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma@0.12.9
#  sudo: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
##  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' )  and ( ansible_distribution_release != 'precise' )

#Ubuntu 12 ln -s /usr/local/lib/node_modules/karma/bin/karma /usr/local/bin/karma
#- name: workstation | Create karma binaries link (legacy required)
#  file: path=/usr/local/bin/karma src=/usr/local/lib/node_modules/karma/bin/karma state=link
#  sudo: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')

#TODO below does not works
#- name: workstation | Update karma rights
#  file: path=/usr/local/lib/node_modules mode=0777 owner=root group=root state=directory recurse=yes
#  sudo: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')

#TODO WORKAROUND by hand
#cd /usr/local/bin
#ln -s ../lib/node_modules/karma/bin/karma karma

#cd /usr/local/lib/node_modules
#chown -R nobody:jenkins *

#- name: workstation | Ensure the karma-junit-reporter npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-junit-reporter@0.2.2
#  sudo: yes
#
#- name: workstation | Ensure the karma-ng-scenario npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-ng-scenario@0.1.0
#  sudo: yes
#
#- name: workstation | Ensure the karma-ng-html2js-preprocessor npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-ng-html2js-preprocessor@0.1.0
#  sudo: yes
#
#- name: workstation | Ensure the karma-coverage npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-coverage@0.2.1
#  sudo: yes
#
#- name: workstation | Ensure the karma-jasmine npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-jasmine@0.1.5
#  sudo: yes
#
#- name: workstation | Ensure the jasmine-reporters npm dependencies are installed
#  command: chdir=/usr/bin npm install -g jasmine-reporters@0.4.1
#  sudo: yes
#
#- name: workstation | Ensure the phantomjs npm dependencies are installed
#  command: chdir=/usr/bin npm install -g phantomjs@1.9.2-4
#  sudo: yes
#
#- name: workstation | Ensure the karma-requirejs npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-requirejs@0.2.1
#  sudo: yes
#
##- name: workstation | Ensure the karma-phantomjs-launcher npm dependencies are installed
##  command: chdir=/usr/bin npm install -g karma-phantomjs-launcher@0.1.4
##  sudo: yes
#
#- name: workstation | Ensure the karma-chrome-launcher npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-chrome-launcher@0.1.3
#  sudo: yes
#
#- name: workstation | Ensure the karma-firefox-launcher npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-firefox-launcher@0.1.3
#  sudo: yes
#
#- name: workstation | Ensure the karma-ie-launcher npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-ie-launcher
#  sudo: yes
#
##- name: workstation | Ensure the webdriverjs npm dependencies are installed
##  command: chdir=/usr/bin npm install -g webdriverjs
##  sudo: yes

##
 # Coffee script
 #
#description: Install "coffee-script" node.js package.
#- npm: name=coffee-script path=/app/location
#
#description: Install "coffee-script" node.js package on version 1.6.1.
#- npm: name=coffee-script version=1.6.1 path=/app/location
#
#description: Install "coffee-script" node.js package globally.
#- npm: name=coffee-script global=yes
#
#description: Remove the globally package "coffee-script".
#- npm: name=coffee-script global=yes state=absent
#
#description: Install packages based on package.json.
#- npm: path=/app/location
#
#description: Update packages based on package.json to their latest version.
#- npm: path=/app/location state=latest
#
#description: Install packages based on package.json using the npm installed with nvm v0.10.1.
#- npm: path=/app/location executable=/opt/nvm/v0.10.1/bin/npm state=present

- name: workstation | Mount | Disable mount points
  mount: >
    name='{{ item }}'
    src='/mnt/dpool{{ item }}'
    fstype=nfs
    state=unmounted
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and mount_enabled
  tags: mount
  with_items:
    - /image
    - /owncloud

#    opts=rw,nodev,nosuid,soft,bg,intr,-r16384,-w16384
- name: workstation | Mount | Setup mount points
  mount: >
    name='{{ item }}'
    src='/mnt/dpool{{ item }}'
    fstype=nfs
    state=mounted
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and mount_enabled
  tags: mount
  with_items:
    - /media/ftp
    - /media/photo
    - /media/music
    - /media/video
    - /archive
    - /backup

# Mount up device by UUID
#TODO iSCSI
#- name: workstation | Mount | Setup mount points
#  mount:
#    name:/home src='UUID=b3e48f45-f933-4c8e-a700-22a159ec9077'
#    fstype:xfs
#    opts:noatime
#    state:present
#  sudo: yes
#  tags: mount
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and mount_enabled

##
 # Unity package
 #
- name: workstation | Uninstall whoopsie packages
  apt: >
    pkg={{ item }}
    state=absent
    purge=yes
    force=yes
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  tags: package
  with_items:
    - whoopsie

##
 # Dash unity lens installation
 # http://doc.ubuntu-fr.org/unity-lens
 #
- name: dash | Uninstall unity-lens and unity-scope packages
  apt: >
    pkg={{ item }}
    state=absent
    purge=yes
    force=yes
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and dash_enabled
  tags: dash_setup
  with_items:
    - unity-scope-video-remote
    - unity-scope-musicstores
    - unity-lens-shopping
    - unity-lens-gwibber
    - unity-lens-askubuntu
    - unity-scope-askubuntu
    - unity-lens-friends
    - unity-lens-video
    - unity-lens-music
    - unity-lens-photos

- name: dash | Install unity-lens and unity-scope packages
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and dash_enabled
  tags: dash_setup
  with_items:
    - unity-lens-applications
    - unity-lens-files
#    - unity-lens-wikipedia
#    - unity-lens-radios
#    - unity-lens-vm
#    - unity-lens-github
    - unity-scope-gdrive
    - unity-scope-chromiumbookmarks
    - unity-scope-firefoxbookmarks
    - unity-scope-manpages
    - unity-scope-virtualbox

#http://linuxfr.org/news/integration-des-web-apps-dont-linuxfr-org-dans-unity
- name: webapps | Add webapps repo for unity-webapps-preview packages
  apt_repository: repo="ppa:webapps/preview" update_cache=yes state={{ workstation_repository_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and webapps_enabled
  tags: webapps_setup

- name: webapps | Install unity-webapps-preview packages
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and webapps_enabled
  tags: webapps_setup
  with_items:
    - unity-webapps-preview
    - unity-webapps-common
    - unity-chromium-extension
    - unity-webapps-googlecalendar
    - unity-webapps-gmail
    - unity-webapps-googledocs
    - unity-webapps-googleplus
    - unity-webapps-twitter
    - unity-webapps-facebookmessenger
    - xul-ext-unity

- name: dash | Add dash repo for unity-lens history packages
  apt_repository: repo="ppa:markjtully/ppa" update_cache=yes state={{ workstation_repository_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: dash_setup

- name: dash | Install unity-lens history packages
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: dash_setup
  with_items:
    - unity-web-history-lens
    - zeitgeist-datasource-firefox

#- name: dash | Add dash repo for unity-lens grooveshark packages
#  apt_repository: repo="ppa:scopes-packagers/ppa" update_cache=yes state={{ workstation_repository_state }}
#  sudo: yes
#  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and dash_enabled
#  tags: dash_setup
#
#- name: dash | Install unity-lens grooveshark packages
#  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
#  sudo: yes
#  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and dash_enabled
#  tags: dash_setup
#  with_items:
#   - unity-scope-grooveshark

- name: dash | Add dash repo for unity-lens google docs packages
  apt_repository: repo="ppa:nilarimogard/webupd8" update_cache=yes state={{ workstation_repository_state }}
  sudo: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: dash_setup

- name: dash | Install unity-lens google docs packages
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: dash_setup
  with_items:
    - unity-lens-gdocs

#sudo add-apt-repository ppa:nilarimogard/webupd8
#sudo apt-get update
#sudo apt-get install unity-lens-gdocs
#gksu gedit /usr/bin/unity-lens-gdocs.py
#unity-lens-gdocs.py
#setsid unity
#
#sudo add-apt-repository ppa:scopes-packagers/ppa
#sudo apt-get update && sudo apt-get install unity-lens-pidgin

- name: dash | Add dash repo for unity-lens pidgin packages
  apt_repository: repo="ppa:scopes-packagers/ppa" update_cache=yes state={{ workstation_repository_state }}
  sudo: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: dash_setup

- name: dash | Install unity-lens pidgin packages
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and ansible_distribution_version in ['12.04'] and dash_enabled
  tags: dash_setup
  with_items:
    - unity-lens-pidgin

#http://www.florian-diesch.de/software/classicmenu-indicator/
- name: classicmenu | Add dash repo for classicmenu-indicator packages
  apt_repository: repo="ppa:diesch/testing" update_cache=yes state={{ workstation_repository_state }}
  sudo: yes
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' ) and ansible_distribution_version in ['12.04'] and classicmenu_enabled
  tags: classicmenu_setup

- name: dash | Install classicmenu-indicator pidgin packages
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and classicmenu_enabled
  tags: classicmenu_setup
  with_items:
    - classicmenu-indicator

- name: workstation | Add apache jenkins vhosts configuration.
  template:
    src: "apache-jenkins.conf.j2"
    dest: "{{ apache_conf_path }}/sites-available/jenkins.conf"
    owner: root
    group: root
    mode: 0644
  sudo: yes
#  notify: restart apache
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apache_create_vhosts

- name: workstation | Enable the jenkins site
  action: command a2ensite jenkins
  sudo: yes
  ignore_errors: yes
  tags: apache
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apache_create_vhosts

- name: workstation | Add apache nabla vhosts configuration.
  template:
    src: "apache-nabla.conf.j2"
    dest: "{{ apache_conf_path }}/sites-available/nabla.conf"
    owner: root
    group: root
    mode: 0644
  sudo: yes
#  notify: restart apache
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apache_create_vhosts

- name: workstation | Enable the nabla site
  action: command a2ensite nabla
  sudo: yes
  ignore_errors: yes
  tags: apache
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apache_create_vhosts

- name: workstation | Add apache awx ansible tower vhosts configuration.
  template:
    src: "apache-awx-httpd-7077.conf.j2"
    dest: "{{ apache_conf_path }}/sites-available/awx-httpd-7077.conf"
    owner: root
    group: root
    mode: 0644
  sudo: yes
#  notify: restart apache
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apache_create_vhosts

- name: workstation | Enable the awx ansible tower site
  action: command a2ensite awx-httpd-7077
  sudo: yes
  ignore_errors: yes
  tags: apache
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apache_create_vhosts

- name: workstation | Enable the apache mod headers
  action: command a2enmod headers
  sudo: yes
  ignore_errors: yes
  tags: apache
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apache_create_vhosts

#Fix security issue :
#X-Content-Type-Options: nosniff
#WARNING this is a whole file overwrite
- name: workstation | Add apache main configuration (ports.conf).
  template:
    src: "ports.conf.j2"
    dest: "{{ apache_conf_path }}/ports.conf"
    owner: root
    group: root
    mode: 0644
  sudo: yes
#  notify: restart apache
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and apache_create_vhosts

- name: Check user
  user: name={{ variety_owner }} state=present

- name: Check user home directory
  stat: path={{ variety_owner_home }}
  register: home_present

- debug: msg="Path exists and is a directory"
  when: home_present.stat.isdir is defined and home_present.stat.isdir == true

- name: variety | Create base directory
  file:
    dest="{{ variety_directory }}"
    state=directory
    owner="{{ variety_owner }}"
    group="{{ variety_group }}"
  ignore_errors: true
#  sudo_user: "{{ variety_owner }}"
  tags: variety_setup

- name: variety | Add variety configuration.
  template:
    src: "variety.conf.j2"
    dest: "{{ variety_directory }}/variety.conf"
    owner: "{{ variety_owner }}"
    group: "{{ variety_group }}"
    mode: 0644
#  notify: restart variety

- name: dropbox | Create user directory
  file:
    dest="{{ dropbox_user_directory }}"
    state=directory
    owner="{{ dropbox_owner }}"
    group="{{ dropbox_group }}"
  tags: dropbox_setup

- name: dropbox | Create base directory
  file:
    dest="{{ dropbox_directory }}"
    state=directory
    owner="{{ dropbox_owner }}"
    group="{{ dropbox_group }}"
  ignore_errors: true
  tags: dropbox_setup

- name: dropbox | Add dropbox configuration.
  template:
    src: "info.json.j2"
    dest: "{{ dropbox_directory }}/info.json"
    owner: "{{ dropbox_owner }}"
    group: "{{ dropbox_group }}"
    mode: 0644
#  notify: restart dropbox

- name: Install pip python package
  apt:
    pkg: "{{ item }}"
    state: latest
    update_cache: yes
    cache_valid_time: 600
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and python_enabled
  with_items:
    - python-dev
    - python-pip

- name: Install Ansible documentation generator prerequisite
  pip: name={{ item }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and python_enabled and ansigenome_enabled
  with_items:
    - paramiko
    - PyYAML
    - jinja2
    - httplib2

- name: Install Ansible documentation generator
  pip: name=ansigenome
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and python_enabled and ansigenome_enabled

#TODO
#sudo pip install ansigenome
#easy_install ansigenome
#sudo ansigenome config
#cd ~/env/ansible/roles
#ansigenome scan

- name: workstation | Install python utilities tools
  apt: pkg={{ item }} update_cache=yes state={{ workstation_pkg_state }}
  sudo: yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (ansible_distribution_version not in ['12.04']) and python_enabled
  tags: package
  with_items:
#flake8 .
   - python-flake8

#- name: workstation | Check user
#  user: name={{user}} state=present

#/bin/false

- name: workstation | Force no login for user jboss
  user: name=jboss shell=/bin/bash state=present
  sudo: yes

- name: workstation | Force no login for user sonar
  user: name=sonar shell=/sbin/nologin state=present
  sudo: yes

#- name: workstation | Force no login for user vagrant
#  user: name=vagrant shell=/bin/false state=present
#  sudo: yes

#- name: workstation | Force no login for user zap
#  user: name=zap shell=/bin/false state=present
#  sudo: yes

- name: workstation | Force no login for user jenkins
  user: name=jenkins shell=/bin/bash state=present
  sudo: yes
