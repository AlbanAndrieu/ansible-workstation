---
- name: workstation | Install debuging tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
    - ack
    - command-not-found
    - dstat
    - htop
    - iftop
    - etherape
    - iptraf-ng
    - nload
    - avahi-utils
    - mtr
    - iotop
    - iperf
    - fping
    - lsof
    - socat # socat unix-connect:/tmp/haproxy.socket stdio
    - ltrace
    - multitail
    - ncdu
    - pciutils
    - pstack
    - pv
    - smem
    - socat
    - strace
    - sysstat
    - tmux
    - tree
    - tshark
    - cpu-x
    - lm-sensors
    - jq # for json https://stedolan.github.io/jq/download/
  tags:
    - package
    - monitoring

- name: workstation | Install system debuging tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
    - systemtap
    #- linux-headers-generic
  tags:
    - package
    - system

- name: workstation | Add linux header for debuging system
  shell: apt-get install linux-headers-$(uname -r)
  #  changed_when: false
  become: true
  #  ignore_errors: true
  tags:
    - package
    - headers
    - system

- name: workstation | Add debuging symbol
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
    - ubuntu-dbgsym-keyring
    #- xserver-xorg-core-dbgsym
  #  ignore_errors: true
  tags:
    - package
    - headers
    - system

#sudo apt-get install gnome-shell-dbgsym libglib2.0-*dbgsym libgtk*-dbgsym

- name: workstation | Add putty
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and pfsense_enabled
  with_items:
    - putty # for netgear and pfsense
  tags:
    - package
    - serial
    - ssh
    - netgear

- name: workstation | Add wakeonlan
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and freenas_enabled
  with_items:
    - wakeonlan  # for freenas
  tags:
    - package
    - freenas

- name: workstation | Add s6 overlay
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and s6_enabled
  with_items:
    - s6  # for apache
  tags:
    - package
    - freenas

# Lens
# curl -fsSL https://downloads.k8slens.dev/keys/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/lens-archive-keyring.gpg > /dev/null
# echo "deb [arch=amd64 signed-by=/usr/share/keyrings/lens-archive-keyring.gpg] https://downloads.k8slens.dev/apt/debian stable main" | sudo tee /etc/apt/sources.list.d/lens.list > /dev/null
# sudo apt update && sudo apt install lens

- name: workstation | Add k8slens GPG key
  ansible.builtin.get_url:
    url: https://downloads.k8slens.dev/keys/gp
    # dest: /etc/apt/keyrings/lens-archive-keyring.gpg
    dest: /usr/share/keyrings/lens-archive-keyring.gpg
    mode: '0644'
    force: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and and ansible_distribution_version not in ['12.04'] and lens_enabled
  tags:
    - package
    - lens

- name: workstation | Make sure k8slens is enabled for usr tools
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/lens-archive-keyring.gpg] https://downloads.k8slens.dev/apt/debian stable main"
    state: present
    update_cache: yes
    filename: lens.list
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and and ansible_distribution_version not in ['12.04'] and lens_enabled
  become: true
  ignore_errors: true
  tags:
    - package
    - lens

- name: workstation | Install lens tools
  action: "{{ ansible_pkg_mgr }} name={{ item }} state={{ util_pkg_state|default('present') }}"
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and and ansible_distribution_version not in ['12.04'] and lens_enabled
  tags:
    - package
    - lens
  with_items:
    - lens
